<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>用芯片让好姬友对我言听计从</title>
    <url>/%E7%94%A8%E8%8A%AF%E7%89%87%E8%AE%A9%E5%A5%BD%E5%A7%AC%E5%8F%8B%E5%AF%B9%E6%88%91%E8%A8%80%E5%90%AC%E8%AE%A1%E4%BB%8E/</url>
    <content><![CDATA[<h3 id="重逢"><a href="#重逢" class="headerlink" title="重逢"></a>重逢</h3><p>「白碳，你应该听说过『Neo-Intafēsu』吧？」</p>
<p>在Naito-Shiti郊区，一栋外观平平无奇的Baiotekku公司设施的地下。</p>
<p>「新闻上说是……娱乐办公的最新方式，人机交互的革命手段？」</p>
<p>那间没有黑暗的实验室里，两个身影在监视器上清晰可见。</p>
<p>真纪小心翼翼地举起一块封存在玻璃中的Neo-Intafēsu芯片，她身着白色实验服，红发飘逸，淡黄色的眼睛透露着无法捉摸的思绪。</p>
<p>「你记得没错，但那是很狭隘的概括。根本上说，Neo-Intafēsu的功能是在大脑中产生或读取神经信号。」</p>
<p>白碳紧紧盯着那块芯片。从手术椅上延伸出的拘束带缠绕着白碳的身体和四肢，只留下一点活动的余地。</p>
<p>「那么，你的意思是公司要用这个东西在我的大脑里搜集情报吗？」</p>
<p>她稍微扭动了一下，似乎想撑起身子，但又被拘束带拉了回去。</p>
<p>几天前，白碳和论坛上的一些网友前往郊外的另一处公司设施，打算从中下载那些见不得光的信息。</p>
<p>然而，不知道为什么，她们被公司安保发现了。为了掩护其他人撤离，白碳被当场抓获，最终送到这个地下实验室。</p>
<p>「不是的，白碳，如果只是想要你那些情报，公司安保有廉价得多的方法。痛楚面前没有英雄，你小时候就跟我说过。</p>
<p>「我的项目刚好缺个实验对象，又听说你来了公司，就把你要过来了。」</p>
<p>「……你想拿我做小白鼠？」</p>
<p>「总比被拷打致死然后扔进垃圾堆要好。我的项目可要温和多了，至少不会痛。</p>
<p>「将Neo-Intafēsu安装在你的大脑上之后，它可以伪造、截断和纂改大脑中的神经信号。谁控制信号，谁就控制意识。</p>
<p>「Neo-Intafēsu会先把你的意识和心智转移到可插拔的神经芯片上，然后部署它的操作系统，最后再把『你』读取回去。</p>
<p>「这样你的身体和心灵就处于Neo-Intafēsu，或者说是我的支配之下了。这也就是项目正式开始的部分——我能把你支配到何种程度？」</p>
<p>「控制你的身体，把你变成一个不会动的人偶摆件；操纵你的意识，让你念出最羞耻的话语，沦为一只围在我身边团团转的小猫；纂改你的记忆，扭曲你的感情，让你永远忘记我；还有神经芯片，我可以把你的意识插到别的可兼容物件上，比如……我的『小玩具♡』。随着接入的时间越来越长，你就会越来越认同自己小玩具的身份，很可爱吧♡」</p>
<p>真纪顿了一下，就好像期待白碳开口。白碳试着缩进椅子里，她什么都说不出来。于是真纪继续说：</p>
<p>「最终，你的身与心都会归公司所有，由我肆意操纵和玩弄。我看得出来,你开始了解到那个世界会像什么样子……哦，对了，在安装Neo-Intafēsu前，得先将你的大脑与之调谐。」</p>
<p>一条机械臂伸出，将头盔戴在白碳的头上，眼罩式的屏幕从头盔缓缓降下。</p>
<p>真纪蹲下来，微笑着观察白碳的反应。</p>
<p>白碳的瞳孔缩小到极致，汗珠从额头滚落，手指在空气中乱挠，似乎想抓住什么，但又被拘束带限制着。她昂起头，试图从眼罩的下方看清真纪的脸。</p>
<p>真纪伸出她白哲的手，温柔地揉捏着白碳的脸颊。她凑到白碳的耳边，轻声低语，把气吹进白碳的耳道：「我还没说完：但是到最后,你对那个世界不只是了解而已。你会接受它,欢迎它,变成它的一部分。」</p>
<p>毛茸茸的耳机压紧，隔断了外界的一切声音。屏幕也终于到位，白碳的眼前变得一片漆黑。</p>
<p>「……你做不到！你以为你这样就可以占有……」白碳对着一片虚无与寂静无力地回击。</p>
<p>「……说真的，我从以前就很喜欢你的态度。」耳机里响起了真纪的声音。「既然你那么不乐意，那就试着抵抗到底吧。说不定只要一直无法调谐，我就会放过你哦？」</p>
<p>「……Neo-Intafēsu，开始调谐。」</p>
<h3 id="「掌」控"><a href="#「掌」控" class="headerlink" title="「掌」控"></a>「掌」控</h3><p>屏幕上，Baiotekku的Logo一闪而过。绚丽多彩的色块以某种难以捉摸的规律排布、闪烁、跳跃、旋转。</p>
<p>「只要不去看就好了……吧？」白碳暗自想着，注意力却忍不住集中到色块上。</p>
<p>单调的低频声波在耳边响起，却并不显得尖锐突兀。它贯穿白碳的大脑，让意识逐渐变得浑浊而迟钝。</p>
<p>正当白碳的注意力被色块完全吸引的时候，突然间好像听到了一种缺乏抑扬顿挫的声音。</p>
<p>「我感觉很放松……」</p>
<p>「……这是调谐程序的引导。」白碳成功抽离了一部分注意力。「只要我……不配合引导，调谐应该就无法继续进行。」</p>
<p>「我感觉头脑一片空白……」</p>
<p>「不，我的头脑十分清醒……呜！？」</p>
<p>在抵抗的那一瞬间，屏幕上的色块开始以某种不可名状的方式运动起来，背景低沉的声波也加入了好几种频率。</p>
<p>不可理解的信息涌进大脑，白碳的意识面临过载。</p>
<p>「思考让我很疲倦……」</p>
<p>思考……唔……哈……很疲倦……</p>
<p>「放弃思考会让我很舒服……」</p>
<p>嗯……放弃……思考……不……</p>
<p>「只要听从声音就好……」</p>
<p>呼……啊……我不会……听从……</p>
<p>「把自己交给声音就好……」</p>
<p>不……我绝不……嘶哈……</p>
<p>「……看来简单程序对你效果不太好呢，白碳。」冰冷的电子音中断，真纪柔和的声音重新回到耳机里。「不过，你很快就会主动接受的。」</p>
<p>像潜行的猫一样爬上治疗椅，双腿叉开到白碳身体的两侧，慢慢地前倾身体，压在白碳身上，感受着白碳胸口的起伏，轻柔而颤动的鼻息扑在脸上。</p>
<p>「？……真纪同学？……你在做什么？」</p>
<p>「白碳啊，我在想，只要你达到高潮，应该就没有精力抵抗了吧。」</p>
<p>一粒一粒解开洁白衬衫的扣子，露出朴素而略显稚气的胸罩。伸出细长的手指，却又在上面停住，稍微弯曲一些，犹豫着想收回手，终于还是下定决心，按在胸罩上面，温暖的触感从指尖传来，缓缓地按压、揉动，让松软的感觉充盈手掌……</p>
<p>白碳的整个身体紧绷了一下，接着不自然地挺起，摩擦着拘束带，呼吸变得急促而不规律。双手开始无意识地抓挠着皮制的托板，小脚在鞋子里面不安分地摆动。</p>
<p>「呜……这种事……没有意义……真纪同学……你知道我是不会成为公司的所有物的……」</p>
<p>把还有点冰冷的手指一点点探入胸罩遮掩的地方，摸索着，把握着微微隆起的形状，食指和中指划过细腻的皮肤，夹住胸前的那一颗突起，轻轻扭动。手臂撑在白碳轻颤的身体上，顺势贴近她的脖颈，舌头在锁骨之上轻轻游走，用舌苔摩擦着白碳的每一寸，聆听白碳无力而断续的呜咽……</p>
<p>「没关系的……白碳，那就成为我的所有……就好……」</p>
<p>手沿着汗津津的腹部一步步向下滑，慢慢攀上了那条有着可爱花纹的内裤。潮湿、而又闷热。白碳的双腿抽动了一下，想把真纪的手夹住，但拘束带牢牢把她捆在了原位。</p>
<p>「哎呀……还穿着我送的生日礼物呢……真可爱……我会用手指好好抚摸你的……」</p>
<p>只用中指轻轻一压那条细缝，白碳的口中就逸出了可爱的悲鸣。三个指腹轻轻上下摩挲着，从粗糙的布料底下传来白碳止不住的颤抖。白碳开始不自觉地扭动，呻吟着，湿热的气体从嘴唇颤抖着吐出。</p>
<p>稍微停顿一下手指，然后隔着布料，一下压到小穴的深处。</p>
<p>「哈啊♡~！」</p>
<p>黏稠的爱液沾湿了内裤。真纪的脸贴上了白碳的胸口，拉起胸罩，将那颗小巧的果实轻轻含入、舔舐、吮吸。</p>
<p>「被抓起来的这段时间都没好好洗过澡吧，身上有一种独特的气息呢……不过，这也是白碳的一部分，喜欢♡」</p>
<p>话语间，用力按压着白碳的蜜穴，然后继续吮吸着另一颗乳头。</p>
<p>「真纪同学……呜呜……真纪……不要这样……真纪……啾呜？！」</p>
<p>真纪突然吻住了白碳。白碳有些不知所措，但很快就放松下来，让真纪的舌头在自己的嘴中肆意探索、搅动。</p>
<p>「嗯唔……嗯嗯……」</p>
<p>呼吸不过来，这就是白碳的感觉。在意识恍惚之间，身上各处都传来真纪一直滚烫的体温。</p>
<p>「……呼哈……」</p>
<p>嘴唇之间拉出了一条细细的银线。</p>
<p>「终于肯这样叫我了……白碳♡……」</p>
<p>手指轻缓地摸到内裤的里面，渐渐靠近那未经人事的骆驼趾。</p>
<p>「真……真纪……咿啊……」</p>
<p>在湿滑的肉唇上轻推，等粘腻的蜜浆渗入指缝。让中指逐渐没入花径之中，轻柔地来回插动，用那朦胧晦涩的眼睛观察白碳的表情，红扑扑的，喘息着，津液从嘴角流出，很久没见到这样的白碳了，看起来没有什么不适呢。</p>
<p>「再伸一根进来哦，湿湿滑滑的，很容易进来~」</p>
<p>「欸……啊……等……不，不行……哈啊♡~！……」</p>
<p>软嫩又紧致的肉壁将中指和无名指包裹在其中，似乎有一种不可思议的吸力。</p>
<p>「嗯嗯……咕啊……真纪……我……」</p>
<p>随着抽插频率的加快，白碳忍不住强烈的快感，开始主动迎合真纪的动作。两人就这样，缠绕在一起，来回交合着……</p>
<p>「咕啾~……」</p>
<p>「哈啊……」</p>
<p>「嗯唔……」</p>
<p>当白碳的身体颤抖着即将达到顶点的时候，真纪的动作突然慢了下来。</p>
<p>「……欸？」</p>
<p>「再往前一步，白碳就无可挽回了哦~」</p>
<p>「……欸！……哈……是哦……」</p>
<p>真纪用恰到好处的力度和节奏，把白碳控制在高潮的边缘。想去也去不了，但是欲望还在像海浪一样一波波涌过来……</p>
<p>好想去……身体好热……可是，高潮的话……</p>
<p>「看在我们过去那么要好的关系上，给你一个选择的机会吧？是要就这样达到高潮，失去所有权利和尊严，在之后的人生中把身心都交由我来玩弄；还是想让我就这样放过你，从此再也见不到我，在之后的人生中永远清清冷冷地过着无人疼爱的生活？嗯♡？」</p>
<p>「咕……哈啊……」</p>
<p>「没关系的，你有很充分的思考时间♡ 我会等你的♡」</p>
<p>好想去……好想……想要真纪……</p>
<p>我在想什么……这样下去会把身体和心灵都交给真纪的……自我会不复存在的……</p>
<p>这是真纪对我的报复吗……</p>
<p>不过如果是真纪的话……一定……</p>
<p>真纪居高临下地俯视着白碳，就好像一切尽在「掌控」之中。</p>
<p>用手指温柔地欺凌着白碳，看着白碳在自己身下颤抖，被玩弄到面色通红、呼吸凌乱，几乎说不出完整的话语…..好可爱……</p>
<p>……我终于……能拥有她了吗……</p>
<p>这是我对她的报复吗……</p>
<p>遮盖在那眼罩之下的，究竟是怎样的神情呢……</p>
<p>「……真纪……高潮……」</p>
<p>「嗯？我没听清楚呢♡」</p>
<p>「……拜托了……真纪……让我高潮吧……」</p>
<p>「确定吗？如果高潮的话，从此身心都要交给我了哦？」</p>
<p>「……呜……让我高潮，真纪……」</p>
<p>「就知道你会这么选♡ 最喜欢你了♡」</p>
<p>一下就连指根也一起插入，指腹摩擦过每一条细肉，早已到达边缘的快感一口气漫溢而出，将脑海冲刷得一片空白。</p>
<p>「啊啊……♡」</p>
<p>白碳仰起头来，剧烈的快感冲击着全身，整个身体几乎反弓起来，脚尖抽搐着绷直了。爱穴一瞬间缩紧，滚烫的淫汁从中溅射而出，喷了真纪一手。</p>
<p>「嗯呼……哈……啊……」</p>
<p>慢慢地，白碳开始脱力，躺在治疗椅上不住地颤抖。</p>
<p>真纪轻轻地抱住了白碳，就这样一直抱着，一言不发。</p>
<p>结束了。</p>
<p>泪水从眼罩底下流出，究竟蕴含着怎样的情感呢？</p>
<p>大脑一片空白。什么也不去想，什么也想不了，就这样浸泡在余韵里……</p>
<p>「……………………Neo-Intafēsu，重新调谐。」</p>
<p>……</p>
<h3 id="占有"><a href="#占有" class="headerlink" title="占有"></a>占有</h3><p>「白碳，基本状态评估。」</p>
<p>「收到。本机代号『白碳』，Neo-Intafēsu版本号：101实验室开发版 0.1.0。本机当前各项生理指标在预期范围内，现消耗下极限活动时间1天17小时。本机已接入神经芯片，未启动心智模拟，对应人格无意识……」</p>
<p>「白碳」正在平淡地报告着各种参数，手臂按在身体两侧，眼睛失去了所有的神采。实验室的微光打在身上，映照出略显贫瘠的胸部，平时一直遮掩着的一道道旧伤的痕迹如凉席般排列于手腕上，裙子在肚子上勒出一点点肉，略微泛黄的白丝在被捕的时候刮出一道道口子，没有包扎过的伤口就那样愈合。</p>
<p>脸颊、胸前、手臂、小腹、大腿，到处都烙着实验室的资产管理条形码，只要拿着具有管理员权限的机器扫描条形码，就能查询到「白碳」的尺寸、重量、外观、特征等信息，还可以通过连接到Neo-Intafēsu进行自动控制和收纳，是很先进的功能。</p>
<p>Neo-Intafēsu很顺利地植入了，没有再遭遇任何抵抗。</p>
<p>拿着储存着白碳心智备份的神经芯片对着灯光看去，五彩斑斓的记忆折射出如梦幻般绚丽的色彩，刻入眼中。</p>
<p>就像微缩的电影胶片，映照着白碳的一生。</p>
<p>喜欢吃哪个口味的冰淇淋？最喜欢的轻小说是哪本？洗澡的时候会哼唱哪首音乐？夜深人静的时候对着真纪的照片在幻想什么？</p>
<p>「我终于拥有你了……白碳……从身体到心灵，我全部都拥有了……」</p>
<p>轻轻放在收纳容器中，将柜子锁上。转过身来，面对这个等待着自己命令的肉体。</p>
<p>「躺在治疗椅上，然后启动心智模拟，要求心智对我的指令服从。」</p>
<p>我现在就好想欺负你呀……</p>
<p>白碳的双眼眨了眨，然后从椅子上坐了起来。</p>
<p>「你已经安装好了？我是没感觉出什么特别的……，还是说你已经动过手脚了？」</p>
<p>「问得正好，我们现在开始。跪下。」</p>
<p>「欸？」</p>
<p>身体突然就跪在地上了。想抬起膝盖，但是整条腿完全没有反应，就好像一块石头，或者根本不长在自己身上。只能这样跪在原地，仰视着真纪一步步走近……</p>
<p>「果然有效果呢。」</p>
<p>一个小机器人GO-4把椅子推了过来，真纪就这样坐在白碳面前，俯视着她。</p>
<p>「欸……啊……真纪你能不能温柔一点啦，好可怕，好疼……」</p>
<p>「不能，你现在已经是实验资产了，搞清楚自己的地位。」</p>
<p>「咦咦，该不会是认真的吧……？」</p>
<p>「要抱怨的话就去抱怨那个选择了高潮的自己吧。现在把裙子拉起来，露出内裤。」</p>
<p>真纪的命令是无法违抗的。手不受控制地动起来，只能看着自己的双手轻轻捏住了裙子的下摆，然后一点点把大腿和那条有着可爱花纹的内裤暴露在凉丝丝的空气中。</p>
<p>「呜呜……真纪好恐怖……」</p>
<p>虽然说已经和真纪激情互动过了，但是用这样的姿势露出自己私密的地方，果然还是有点……</p>
<p>咔嚓一声，我抬起头来，看见真纪正举着相机，对着我拍照。</p>
<p>「不是真纪你在干什么啊？！」</p>
<p>「存档自用，怎么了。把裙子举好，举高点，不要挡住脸，腿再分开一点，很好。来，比个耶。」</p>
<p>又是一声快门声，白碳的脸变得通红。</p>
<p>「呜……拍够了……吧……？……嗯？」</p>
<p>「不够。听好了，我会从3倒数到0，每倒数一个数，你排尿的冲动都会越来越强烈。当我数到0的时候，你就无法再抑制这种冲动了。随着液体的流出，你会感受到一阵十分舒服的愉悦感，让你的身体非常放松，头脑一片模糊♡」</p>
<p>「……真纪……」</p>
<p>「3。」</p>
<p>随着真纪的倒数，下体传来切切实实的尿意，但是自己什么也做不了，只能跪在地上，掀起裙子，等着被真纪一步步命令着放出尿液。</p>
<p>「真纪，饶了我吧……」</p>
<p>「2。」</p>
<p>没想到还有听到白碳求饶的一天，真是可爱。让人想……用更大的力度玩弄呢……</p>
<p>「呜……真纪……」</p>
<p>「1。」</p>
<p>白碳的胸口开始剧烈地起伏，即使咬住牙关，喘息的动作依然十分明显。她的身体开始扭动起来，腰略微压下，忍耐着体内汹涌澎湃的尿意。</p>
<p>能看到白碳跪在自己身前扭动的样子，真纪应该满足得不得了吧。</p>
<p>「想不想尿尿呀，白碳同学~？」</p>
<p>「……想……」</p>
<p>「这样啊……真是诚实的孩子呢……那好吧…………0~♡」</p>
<p>感受到下方传来一股异样的暖流，很努力地想收紧尿道，可是完全不受控制，按真纪的命令放出来了……</p>
<p>实验室内响起了一种细微的声音。内裤上黄色的水渍逐渐扩大，液体从胯下一点点流到实验室的地板上，在地上缓缓积累成一个小水潭，又慢慢渗透到白色的丝袜上，散发出微妙的气味。白碳颤抖着，长长地呼出了一口气，即使下半身已经一塌糊涂，白碳的双手依然忠实地拉起她的裙子，让这个狼狈不堪的画面暴露在真纪的视线和摄像头下，而手指上还比着V。红色从脸颊蔓延到耳根，白碳不敢看向镜头，只能喘息着低头看着自己下方的水洼在排尿的快感中越积越多。</p>
<p>「欸呀，我们的白碳小同学漏尿了呢，内裤和袜子都变得湿漉漉的了w 连尿尿的地方都控制不了的孩子是没办法独当一面的哦♡」</p>
<p>强烈的羞耻感与愉悦感共同冲击着大脑，让意识逐渐恍惚。</p>
<h3 id="欢愉"><a href="#欢愉" class="headerlink" title="欢愉"></a>欢愉</h3><p>乘着白碳还在因为羞耻抬不起头的时候，悄悄打个手势让GO-4调高空调温度，要是不小心感冒就糟糕了。</p>
<p>能看到白碳现在这么可爱的反应，很开心，但是，还不能满足……</p>
<p>真正的占有，不是控制身体的占有，而是控制心灵的占有。</p>
<p>占有就在于施加痛楚和羞辱。就在于把白碳的心智撕成碎片，然后再度拼合成自己想要的新形状。</p>
<p>白碳现在只是消极地被我命令着，这还不够……我要让白碳自己贴到我的脚下，围着我转……</p>
<p>啊，脚……嗯，这样的话，应该就能证明我已经占有她了吧。</p>
<p>脚后跟轻轻一蹭，穿着黑色棉袜的小脚从把她包裹得严严实实的运动鞋中解放出来。或许是鞋内太过于闷热，一股冰凉的感觉立即传遍了脚掌。这几天为了拿到白碳，一直在四处奔走，没有让脚好好休息过呢。……希望白碳反应不要太剧烈吧，不然就太羞耻了……</p>
<p>慢慢地抽出足尖，活动着脚趾，在空气中充分舒展。明明已经是黑色的棉袜，却还是能看出脚掌的施力点有着明显的深色湿印，还有点起球发毛。奇妙的气味虽然称不上刺激，但绝对不是毫无存在感。</p>
<p>就这样，打个响指，先手必胜——</p>
<p>「手可以自由活动了哦，来~，醒醒，看这里——」</p>
<p>在一片恍惚的时候，真纪的响指声让我回过神来。她伸出一只脚勾起我的下巴，强迫我抬起头来看着她。粗糙粘腻的黑色棉袜摩擦着皮肤，有一种痒痒的感觉。然后，真纪把脚掌轻轻压在我的脸上，一股浓郁、酸涩的气味涌入脑中……</p>
<p>「唔唔唔——？！」</p>
<p>抓住真纪的腿使劲推开，大口呼吸着已经不怎么新鲜的空气，强烈的气味就这样在脑中留下痕迹，挥之不去。</p>
<p>「呼……哈……真纪……好过分……虐待我……」</p>
<p>「虐待你的是公司，不是我哦。而且，你很快就不会觉得这是虐待了♡ 来，盯住我的脚，不许躲开……」</p>
<p>真纪抱着腿，把脚举到了我的眼前，足底正对着我，轻轻地摇晃起来……</p>
<p>「观察脚的形状、纹路、光影……」</p>
<p>足底离我越来越近，越来越晃，可在真纪的支配下，我不得不耐心观察起来……</p>
<p>即使被糟糕的棉袜包裹着，也能依稀看到五颗圆润的脚趾。袜子包裹着足弓，勒出一道优美的弧线。掌面上颜色更深的地方，那个，是汗渍吧……</p>
<p>「再闻一闻味道♡」</p>
<p>那种气味，混合着汗臭、酸味和皮革特有的味道，很有真纪的特色。</p>
<p>「看着我的脚，想象她践踏着你的脸颊，蹂躏着你的胸部和下体，快感会从意识的深处产生，那是我的脚带给你的。」</p>
<p>真纪的脚……那种毛糙的袜子在乳头上摩擦，唔……想想就觉得……好刺激……</p>
<p>「所以，只要你看到我的脚，快感就会油然而生……」</p>
<p>真纪的小脚继续在眼前晃动，能看到袜子上褶皱挤压、放松，被这样的脚趾插进身体……会马上高潮的吧……</p>
<p>不对不对，我怎么在看着真纪的脚发情啊……这样下去会变成很奇怪的样子的……</p>
<p>「乖孩子不能想着反抗哦♡ 吸入脚的气味，会让你的身体酥酥痒痒的，欲望就像泡泡一样炸开来呢。而且还会让你的意识变得昏昏沉沉的，没办法思考复杂的事情……」</p>
<p>真纪几乎要把脚底踩在我的脸上了，脚掌酸涩的气味全部都被我吸了进去，虽然很难忍受，可是……好舒服……小腹传来灼热的感觉……脑袋晕乎乎的……</p>
<p>身体好热……没办法忍受了……想要更多的快感……</p>
<p>「不准爱抚自己哦~ 想要变得舒服的话，就从我的脚上索取吧♡」</p>
<p>呜……可是……好热……我……什么都思考不了了……</p>
<p>用手轻轻捧起真纪的足根，慢慢拉向自己，压在脸上，感觉到皮肤被粗糙粘腻的棉袜贴住，视野中只剩真纪的脚掌，近乎贪婪地闻着真纪的味道……</p>
<p>浓郁的气味传进身体，化作一阵阵快感在身体内回荡……感觉下面又开始分泌粘液了呢……</p>
<p>「啊啦，白碳真是好可爱呢。但是，正常人可不会抱着女孩子的脚大口吸气哦，你已经正常人失格了唷。所以，现在你已经变成我的宠物了呢♡」</p>
<p>宠物吗……唔……</p>
<p>「既然是我的宠物，智商就只能和一只小猫差不多了，思考方式和行为方式也会变成小猫哦。宠物不能思考、也不能理解太复杂的事物，只需要知道吃饭、睡觉、『玩乐』和满足主人就够了♡ 每次做出符合宠物身份的行为或者思考，都会强化你身为宠物的自我认知，同时也会产生快感，让你逐渐变成一只无脑渴求快感的可爱小猫咪……」</p>
<p>呜……宠物不能思考……一只无脑的小猫咪……</p>
<p>「宠物不需要用到手，只能在地面上用四肢爬行，就像一只小猫一样活动哦。四肢都用来支撑身体会让身体特别放松……」</p>
<p>我放开了主人的脚，趴在地上，抬起头来闻着主人的袜子，偶尔有几滴爱液从两腿之间滴下。</p>
<p>「宠物的话，不管想表达什么，都只能发出猫猫的声音呢。来，对着你最喜欢的主人叫一声吧♡」</p>
<p>「喵呜~」</p>
<p>感觉叫的时候好舒服……脑子慢慢地变成猫猫的形状了……</p>
<p>「身为宠物的话，只要服从、讨好主人就够了呢。被主人命令的时候、被主人玩弄的时候会特别舒服，暖洋洋的感觉从身体里溢出来，会渴望被主人更多地命令和玩弄呢，即使被玩坏也会很开心呢~」</p>
<p>……</p>
<p>「羞耻、尊严之类的人类的情感，越是违背就越是感到强烈的快感呢。身为人类的时候越是感到羞耻、越是会丧失尊严的事情，身为宠物猫猫的时候就会越是兴奋、越是舒服，会渴望着去做呢~」</p>
<p>我已经是一只宠物猫猫了……一只无脑的宠物猫猫、被主人彻底驯化到脚下的宠物猫猫……</p>
<p>主人笑着把足尖的位置狠狠踩在我的脸上，用足趾撑开的棉袜包裹着我的鼻子。被人踩在脚下，明明应该特别羞耻、完全没有尊严了，可是好舒服，好想被主人更多地践踏……</p>
<p>唔……味道好浓郁，猫猫的小脑袋几乎要昏过去了……身体要被快感填满了呢……好幸福……</p>
<p>太舒服了，忍不住喵喵地叫起来了呢……</p>
<p>「嗯，这个反应，刚刚还抱怨着虐待的小可爱，已经变成只要闻到味道就会发情的小猫咪了呢 那么给我亲爱的宠物一点奖励吧~ 我的小宠物，只要被主人的脚踩到头顶，就会情不自禁地高潮哦~」</p>
<p>主人轻轻抽回了脚，然后一点一点地移动到了我的头顶。</p>
<p>要是被主人用足底践踏的话，就完全丧失尊严了呢，脑袋会变得空空的呢……</p>
<p>头上传来主人足底柔软的触感。</p>
<p>完全没有任何等待时间，身体在意识反应之前就直接高潮了。从猫猫的小穴里喷出许多黏稠的液体，把残存的人类心智彻底清出意识了呢。</p>
<p>就这样，主人得到了一只从身体到心灵都被驯化完成的小猫咪♡</p>
<p>「那么，既然小宠物已经这么舒服了，也该轮到小宠物服侍主人我了哦♡」</p>
<p>主人解开了实验服，脱下短裤，张开双腿，露出了黑色的蕾丝内裤，对我微笑着。</p>
<p>「喵~」</p>
<p>我领会了主人的意图，爬上旋转椅，脸逐渐贴近热气腾腾的内裤。主人的气味，让猫猫又忍不住兴奋起来了。</p>
<p>伸出舌头……</p>
<h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><p>浴室里的水声渐渐停了，白碳应该快要洗好了吧。这间实验室的生活设施很齐全，为研究人员和实验对象长期居住做好了准备。</p>
<p>真纪趴在桌子上，用专用终端翻看着白碳刚刚的记忆。被恢复人类意识后恼羞成怒的白碳暴打了一顿，感觉全身都在疼……</p>
<p>嘛，真是可爱……</p>
<p>不如看看她被绑在治疗椅上寸止的时候是怎么想的……</p>
<p>有两点吗……？还以为她只想着高潮呢。</p>
<p>第一点：想要高潮。</p>
<p>啊，果然还是个忠于内心欲望的孩子呢。自从分开之后也没有改变呢。</p>
<p>第二点：如果是真纪的话，一定会好好爱我的。</p>
<p>……自从分开之后也没有改变呢。</p>
<p>「真纪——我洗好了！但是没有衣服换呀——」</p>
<p>不过没错，我会好好爱着你，不会让公司、或者任何人伤害你的。</p>
<p>「好好，这就过来~」</p>
<p>而且，我会用你最喜欢的方式疼爱你的。</p>
<p>悄悄把运动鞋藏在背后，向裹着浴巾的白碳走去。</p>
<p>「嗯……？衣服呢？」</p>
<p>「宠物不需要穿衣服哦~」</p>
<p>一把把白碳揽入怀中，把鞋子按在她的脸上，看着她在慌乱之中把我的气味全部吸进去。</p>
<p>呜咽声越来越轻，怀中的身体慢慢软了下来，趴到了地上。</p>
<p>毕竟，这就是你一直在心中所渴望的世界吧？我最亲爱、最亲爱的朋友呀。</p>
<p>「喵~」</p>
<p>来日方长♡</p>
]]></content>
  </entry>
  <entry>
    <title>基于Hexo在GitHub Pages上构建静态博客的方法</title>
    <url>/%E5%9F%BA%E4%BA%8Ehexo%E5%9C%A8github-pages%E4%B8%8A%E6%9E%84%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>或许说这是本站从无到有搭建的记录更为准确。</p>
<span id="more"></span>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在寒假的中期，百般聊赖之下，终于是打算拥有一个自己的博客网站。恰好在校中简略学习了网站制作的知识，使我得到了足够的勇气去面对挑战，于是便有了你眼前的这个网站与这篇文章。当然，本文力求使非信息技术相关专业的读者也能轻易上手，因此不需要抱有过多的恐惧。只要你强烈地希望拥有一个自己的博客网站，并且愿意付诸行动，那么我相信这篇文章一定能帮助到你。</p>
<p><em>本文所有操作均在Windows 11系统下进行。</em></p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p><a href="https://hexo.io/">Hexo</a>是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<p>Hexo的特点在于：</p>
<ul>
<li>支持Markdown：Hexo兼容GitHub Flavored Markdown的各项功能，并可与大部分Octopress插件相容。</li>
<li>一键部署：使用简单的指令即可将博客部署至GitHub Pages、Heroku或其他平台。</li>
<li>插件与可扩展性：其强大的API使得用户可以灵活扩展功能，同时轻松集成多种模板引擎（如EJS，Pug，Nunjucks）和工具（例如Babel，PostCSS，Less&#x2F;Sass）。</li>
</ul>
<h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>在安装Hexo之前，我们必须要安装下面两个软件。</p>
<p><a href="https://nodejs.org/">Node.js</a>是能够在服务器端运行 JavaScript 的开放源代码、跨平台执行环境。<q>Node.js版本需不低于10.13，建议使用Node.js 12.0及以上版本</q>，但我不认为大部分用户会去下载这些低版本的软件。</p>
<p><a href="https://git-scm.com/">Git</a>是一个自由开源的分布式版本控制系统，设计用于快速高效地处理从小型到超大型的所有项目。</p>
<h3 id="编辑器-VS-Code（可选）"><a href="#编辑器-VS-Code（可选）" class="headerlink" title="编辑器 VS Code（可选）"></a>编辑器 VS Code（<span class="heti-em">可选</span>）</h3><p><a href="https://code.visualstudio.com/">Visual Studio Code</a>（简称 VS Code）是一款由微软开发且跨平台的免费源代码编辑器。该软件以扩展的方式支持语法高亮、代码自动补全（又称 IntelliSense）、代码重构功能，并且内置了命令行工具和 Git 版本控制系统。用户可以更改主题和键盘快捷方式实现个性化设置，也可以通过内置的扩展程序商店安装其他扩展以拓展软件功能。</p>
<p>这个软件不是必需的，它只是便于你编辑代码、使用Markdown语法，同时简化一些Git相关的操作。但你也可以有自己的想法。</p>
<h3 id="博客框架-Hexo"><a href="#博客框架-Hexo" class="headerlink" title="博客框架 Hexo"></a>博客框架 Hexo</h3><p>在上述两个必要软件安装完成之后，通过在桌面（或者其他文件夹）右键菜单中选择git bash here，输入并执行下面命令来安装Hexo（不要输入美元符号）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p><img src="/images/1.jpg" alt="在桌面右键菜单中选择git bash here"></p>
<p>完成这个操作之后，我们的设备上已经安装了Hexo。</p>
<h2 id="本地构建"><a href="#本地构建" class="headerlink" title="本地构建"></a>本地构建</h2><p>现在我们已经拥有了Hexo，是时候构建网站了。在将网站真正上网之前，我们通常先在自己的电脑上确定显示效果，避免频繁上传的麻烦，也保证网站的稳定。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>在自己的本地磁盘上创建一个文件夹，你可以命名为blog，或者任意名字。这个文件夹用于储存构建博客网站的所有文件。</p>
<p>在此文件夹内打开右键菜单，选择git bash here，输入并执行下面命令以初始化该文件夹：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>

<p><img src="/images/2.jpg" alt="初始化该文件夹"></p>
<p>执行该命令后，Hexo会从GitHub克隆一份基本的网站文件与一份主题，同时使用包管理器下载依赖。完成后，你应该收到一条告知完成的消息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>
<p><img src="/images/3.jpg" alt="告知完成的消息"></p>
<p>此时在你文件夹中至少有以下文件与文件夹：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml  网站的配置信息。可以在此配置大部分的参数。</span><br><span class="line">├── .gitignore   用于Git版本控制时忽略指定文件或目录。</span><br><span class="line">├── package.json 应用程序的信息。EJS,Stylus和Markdown渲染引擎已默认安装。</span><br><span class="line">├── .github      GitHub特定的配置文件夹。</span><br><span class="line">├── node_modules Node.js依赖模块存放目录。你通常不用关心这个。</span><br><span class="line">├── scaffolds    模版文件夹。新建文章时Hexo会根据scaffold来创建文件。</span><br><span class="line">├── source       资源文件夹是存放用户资源的地方。除_posts之外，开头命名为_(下划线)的文件/文件夹和隐藏的文件均会被忽略。</span><br><span class="line">|   └── _posts   存放博客文章的文件夹。</span><br><span class="line">└── themes       主题文件夹。Hexo会根据主题来生成静态页面。</span><br></pre></td></tr></table></figure>

<h3 id="生成与预览"><a href="#生成与预览" class="headerlink" title="生成与预览"></a>生成与预览</h3><p>通过下面命令生成静态文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo generate </span><br><span class="line">或者简写为：</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<p>此时根目录下生成public文件夹，里面存放着生成的站点文件。</p>
<p>现在通过下面命令启动本地服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">或者简写为：</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<p>这个命令默认会在 <a href="http://localhost:4000/">http://localhost:4000/</a> 启动你的网站。通过在终端中按住ctrl并用左键点击链接可以快速在浏览器中打开。你应该会看到下面的页面：<br><img src="/images/4.jpg" alt="最小博客"></p>
<p>至此你已经在本地上构建了第一个你的网站并完成预览，在终端中同时按住ctrl+C终止服务器。下面有一些优化体验的可选操作。</p>
<h3 id="安装第三方主题（可选）"><a href="#安装第三方主题（可选）" class="headerlink" title="安装第三方主题（可选）"></a>安装第三方主题（<span class="heti-em">可选</span>）</h3><blockquote>
<p><strong>注意</strong><br><br></p>
<p>许多插件和主题都是由社区贡献的。本站不保证其可用性和安全性。</p>
</blockquote>
<p>我想初始化时自动安装的主题大概率不合你的口味，Hexo可以通过安装主题来快速改变网站风格。如果你暂时没有心仪的主题，不妨在<a href="https://hexo.io/plugins/">Hexo官网的主题页</a>看看，说不定就能找到你喜欢的主题。<br><img src="/images/5.jpg" alt="Hexo官网的主题页"></p>
<p>一般来说主题的README文档会指导你如何安装与配置主题。但如果没有，<del>换一个</del>试着按下面步骤安装：</p>
<ol>
<li>获取主题文件：如果你不熟悉git操作，那就在GitHub的Code菜单（绿色按键）中选择Download Zip，把主题文件下载到本地并解压。</li>
<li>移动到文件夹：确定解压所得文件夹打开后就能看到_config.yml，将这个文件夹移动到博客根目录中的source文件夹。</li>
<li>修改配置信息：在博客根目录下的_config.yml文件中找到theme参数，将其值改为你的主题文件夹名，例如：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: YourThemeName</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="/images/6.jpg" alt="主题配置"></p>
<p>现在在终端中逐行输入并执行下列指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo clean </span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo server </span><br></pre></td></tr></table></figure>

<p>clean指令将清除缓存文件(db.json)和已生成的静态文件(public)。在某些情况（尤其是更换主题后），如果发现你对站点的更改无论如何也不生效，那么可能需要运行该命令。后两个指令上文已经介绍。</p>
<p>打开网页，你应该能看到你安装的主题已经应用。不同主题都提供一定程度上的配置项，供你调整细节。如果你对网页制作具有基本的了解，或者能熟练使用chatGPT，那么你也可以尝试直接修改相关的代码，实现完全的自定义。</p>
<h3 id="写下第一篇博客（可选）"><a href="#写下第一篇博客（可选）" class="headerlink" title="写下第一篇博客（可选）"></a>写下第一篇博客（<span class="heti-em">可选</span>）</h3><p>或许你早就想把你的想法放进网站，看看它是什么样子了。我们现在就来写下一篇博客。</p>
<p>Hexo有如下指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>new指令将新建一篇文章。如果没有设置layout的话，默认使用_config.yml中的default_layout参数代替。如果标题包含空格的话，需要使用引号括起来。像下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure>

<p>这个操作将会在根目录的source&#x2F;_post文件夹下生成一个&lt;title&gt;.md文件。我们用任意的文本编辑器打开它，能看见类似下面的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>我们将Hexo中文件最上方以—分隔的区域叫做Front-matter，它用于指定个别文件的变量。具体的用法参见<a href="https://hexo.io/zh-cn/docs/front-matter">官方文档</a>，这里不展开说明。</p>
<p>在Front-matter下方是正文部分，Hexo支持以任何格式书写文章，只要安装了相应的渲染插件。默认的.md格式要以Makdown语法书写，Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。如果你不熟悉Markdown语法，可以参考<a href="https://markdown.com.cn/basic-syntax/">这个网站</a>的内容。</p>
<p>在编写博客时，只要你通过hexo s启动了服务器，你就可以通过刷新网页的方式实时查看编辑效果，因为<em>Hexo能够监视文件变动并立即重新生成静态文件</em>。此外，显示效果还可能受到主题影响。</p>
<h2 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h2><p>你已经在本地上看到你的网站的效果了。我们现在将它上传到互联网，使你的博客能被所有人访问。</p>
<h3 id="部署GitHub-Pages"><a href="#部署GitHub-Pages" class="headerlink" title="部署GitHub Pages"></a>部署GitHub Pages</h3><p>我们假定你已经有一个GitHub账号而且已经配置好git了，不知道应该怎么做的话可以参考<a href="https://blog.csdn.net/m0_46278037/article/details/118815158">这篇博客</a>。</p>
<p>现在新建一个仓库（Create a new repository），Repository name填写为&lt;你的GitHub用户名&gt;.github.io，例如“ChaoiteC.github.io”，同时仓库可见性必须为Public（对所有人可见）。<br><img src="/images/7.jpg" alt="新建仓库"></p>
<p>如果操作正确，你会在仓库设置中找到Page选项。<br><img src="/images/8.jpg" alt="Page选项"></p>
<p>现在打开博客根目录下的_config.yml，找到Deployment相关配置项，如下填写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:&lt;你的GitHub用户名&gt;/&lt;你的GitHub用户名&gt;.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<p>你可能注意到官方文档与一些其他教程中repo项填写的是http链接，这也是可以的，但在使用GitHub Actions部署时可能会遭遇拒绝访问的问题。</p>
<p>安装 hexo-deployer-git:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>执行下面命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo deploy 或者简写为： $ hexo d</span><br><span class="line">或者简写为：</span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>
<p>deploy命令会将public目录中的文件和目录推送至_config.yml中指定的远端仓库和分支中，并且<span class="heti-em">完全覆盖</span>该分支下的已有内容。</p>
<p>如果一切工作正常，现在你可以在&lt;你的GitHub用户名&gt;.github.io中看到网站内容。</p>
<h3 id="GitHub-Actions自动部署（可选）"><a href="#GitHub-Actions自动部署（可选）" class="headerlink" title="GitHub Actions自动部署（可选）"></a>GitHub Actions自动部署（<span class="heti-em">可选</span>）</h3><p>我们很快注意到，一旦你离开现在使用的设备，你就无法修改网站内容。当你更换设备时，你不得不将上述步骤全部重复。一旦设备出现故障更是会损失惨重。这些矛盾呼吁我们采取方法，要求我们能自动地储存与部署博客文件，而不受手上设备的限制。</p>
<p>GitHub Actions为我们在需要的时候创建一个容器，我们在容器中安装软件并处理我们的博客文件，最后部署到Pages仓库中。现在我们来实现它。</p>
<h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>首先在Github上新建一个仓库用来储存我们的博客文件，通常我们将其设为私有的。</p>
<p>如果你安装了VS Code，这时候你可以在博客根目录右键菜单中选择“在终端中打开”来启动Windows Powershell，然后输入并执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure>

<p>此命令将会启动VS Code并在其中打开这个文件夹。然后你可以在侧边栏中打开源代码管理页面，从GitHub添加远程库。只需要按照提示操作，你最终能将整个目录下的文件上传到仓库中（被.gitignore指定的文件&#x2F;文件夹不会上传）。</p>
<p>我们将上面内容视为准备操作，如果你不知道如何操作，可以寻求搜索引擎的帮助。</p>
<h4 id="部署密钥"><a href="#部署密钥" class="headerlink" title="部署密钥"></a>部署密钥</h4><p>现在在“git bash here”中执行下面命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -f github-deploy-key</span><br></pre></td></tr></table></figure>

<p>这个命令将生成部署密钥，你只需要一直按空格，根目录下就会出现两个文件：github-deploy-key和github-deploy-key.pub。</p>
<blockquote>
<p><strong>注意</strong><br><br></p>
<p>正如其名字，除非你确定自己在做什么，否则你不应该将密钥直接上传到仓库（尤其是公共仓库）。</p>
</blockquote>
<p>在博客源文件仓库中依序打开Settings-&gt;Secrets and variables-&gt;Actions-&gt;New repository secret。<br><img src="/images/9.jpg" alt="New repository secret"></p>
<p>在Name中填写“HEXO_DEPLOY_PRI”，在Value中填写github-deploy-key文件中的全部内容（包括头尾的文字）。然后Add secret。</p>
<p>在Page仓库中依序打开Settings-&gt;Deploy keys-&gt;Add deploy key。<br><img src="/images/10.jpg" alt="Add deploy key"></p>
<p>在Title中填写“HEXO_DEPLOY_PUB”，在Key中填写github-deploy-key.pub文件中的全部内容，勾选Allow write access，然后Add key。</p>
<h4 id="配置GitHub-Actions"><a href="#配置GitHub-Actions" class="headerlink" title="配置GitHub Actions"></a>配置GitHub Actions</h4><p>在博客根目录下创建.github&#x2F;workflows&#x2F;deploy.yml文件，目录结构如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">└── .github</span><br><span class="line">    └── workflows</span><br><span class="line">        └── deploy.yml</span><br></pre></td></tr></table></figure>

<p>在deploy.yml文件中粘贴下面内容并在对应地方作改动。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Action&#x27;s Name</span><br><span class="line">name: AutoDeploy</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  # Triggering Condition 1 Main Branch Performs The Task After Receiving Push</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main</span><br><span class="line">  # Triggering Condition 2 Manual Button</span><br><span class="line">  workflow_dispatch:</span><br><span class="line"></span><br><span class="line"># Putting Environment Variables Here You Need To Replace It With Your Own</span><br><span class="line">env:</span><br><span class="line">  # After Hexo Compiles Use This Git User To Deploy To The Github Warehouse</span><br><span class="line">  GIT_USER: &lt;你的GitHub用户名&gt;</span><br><span class="line">  # After Hexo Compiles Use This Git Mailbox To Deploy To The Github Warehouse</span><br><span class="line">  GIT_EMAIL: &lt;你的GitHub用户邮箱&gt;</span><br><span class="line">  # The Git Hub Warehouse To Be Deployed After Hexo Compiles</span><br><span class="line">  GIT_DEPLOY_REPO: &lt;你的GitHub用户名&gt;/&lt;你的GitHub用户名&gt;.github.io</span><br><span class="line">  # Hexo Compiles The Branch To Deploy After Compilation</span><br><span class="line">  GIT_DEPLOY_BRANCH: main</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    name: Build on node $&#123;&#123; matrix.node_version &#125;&#125; and $&#123;&#123; matrix.os &#125;&#125;</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    if: github.event.repository.owner.id == github.event.sender.id</span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        os: [ubuntu-latest]</span><br><span class="line">        node_version: [16.x]</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout</span><br><span class="line">        uses: actions/checkout@v4</span><br><span class="line"></span><br><span class="line">      - name: Checkout deploy repo</span><br><span class="line">        uses: actions/checkout@v4</span><br><span class="line">        with:</span><br><span class="line">          repository: $&#123;&#123; env.GIT_DEPLOY_REPO &#125;&#125;</span><br><span class="line">          ref: $&#123;&#123; env.GIT_DEPLOY_BRANCH &#125;&#125;</span><br><span class="line">          path: .deploy_git</span><br><span class="line"></span><br><span class="line">      - name: Use Node.js $&#123;&#123; matrix.node_version &#125;&#125;</span><br><span class="line">        uses: actions/setup-node@v1</span><br><span class="line">        with:</span><br><span class="line">          node-version: $&#123;&#123; matrix.node_version &#125;&#125;</span><br><span class="line"></span><br><span class="line">      - name: Configuration environment</span><br><span class="line">        env:</span><br><span class="line">          HEXO_DEPLOY_PRI: $&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span><br><span class="line">        run: |</span><br><span class="line">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span><br><span class="line">          mkdir -p ~/.ssh/</span><br><span class="line">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">          chmod 600 ~/.ssh/id_rsa</span><br><span class="line">          ssh-keyscan -t rsa github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">          git config --global user.name $GIT_USER</span><br><span class="line">          git config --global user.email $GIT_EMAIL</span><br><span class="line"></span><br><span class="line">      - name: Install dependencies</span><br><span class="line">        run: |</span><br><span class="line">          npm install hexo-cli -g</span><br><span class="line">          # Install According To The Components You Installed</span><br><span class="line">          npm install - gulp gulp-uglify hexo hexo-deployer-git hexo-generator-archive hexo-generator-category hexo-generator-feed hexo-generator-index hexo-generator-search hexo-generator-searchdb hexo-generator-sitemap hexo-generator-tag hexo-renderer-ejs hexo-renderer-marked hexo-renderer-pug hexo-renderer-stylus hexo-server hexo-tag-cloud hexo-word-counter readable-stream uglify-es --save</span><br><span class="line"></span><br><span class="line">      - name: Deploy hexo</span><br><span class="line">        run: |</span><br><span class="line">          npm run deploy</span><br></pre></td></tr></table></figure>

<p>现在你可以尝试在博客源文件仓库中作一点改动并推送到远程库，接着在仓库的Actions页面中观察工作是否正常（不被打红叉）。如果正常，大约在1-2分钟内会完成自动部署任务，你能在Pages上确认到更改。</p>
<h3 id="配置自定义域名（可选）"><a href="#配置自定义域名（可选）" class="headerlink" title="配置自定义域名（可选）"></a>配置自定义域名（<span class="heti-em">可选</span>）</h3><p>无论如何，&lt;你的GitHub用户名&gt;.github.io总归是不够有个性的，而且三级域名会给人一种寄人篱下的感觉（虽然事实也是如此）。现在，我们打算购买一个域名，并使他人能通过这个域名访问我们的网站。</p>
<blockquote>
<p><strong>声明</strong><br><br></p>
<p>本章所述内容仅基于个人经验，并无意宣传或推广任何特定公司或服务。笔者在撰写本文时未收取任何公司的任何形式的费用或报酬。无论你选择任何域名注册商购买域名，操作都大致相同。你所采取的一切行动应自行审慎决定，并非本文的责任范围。</p>
</blockquote>
<blockquote>
<p><strong>注意</strong><br><br></p>
<p>本文内容不涉及选购服务器，但如果你意欲购买，请注意域名注册商和服务器提供商主体应该同在境内或境外，若一方在境内一方在境外，备案时可能会产生问题。</p>
</blockquote>
<p>选择一个合适的域名注册商是很重要的，至少是关乎钱包（）。我比较欣赏的是Cloudflare，他们也提供Pages服务和自动部署功能，而且配置其实比GitHub简单得多，在他们那里购买域名的话配置应该也是很简单的。但我最后选择的是Godaddy，为什么呢？因为Cloudflare注册不了.moe域名，让我感到非常遗憾。</p>
<p>另外在Godaddy购买的时候可以选择买一个￥9&#x2F;月的企业邮箱服务，让你可以快速拥有一个（一堆）以自己的域名为主机名的邮箱！例如我的邮箱：<a href="mailto:&#107;&#97;&#114;&#x75;&#x62;&#x6f;&#x6e;&#119;&#97;&#105;&#116;&#111;&#x40;&#107;&#x61;&#114;&#117;&#98;&#x6f;&#x6e;&#46;&#109;&#111;&#101;">&#107;&#97;&#114;&#x75;&#x62;&#x6f;&#x6e;&#119;&#97;&#105;&#116;&#111;&#x40;&#107;&#x61;&#114;&#117;&#98;&#x6f;&#x6e;&#46;&#109;&#111;&#101;</a>。</p>
<p>所以本文会以Godaddy为例，介绍如何购买和配置域名。</p>
<h4 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h4><p>访问<a href="https://www.godaddy.com/zh-sg">Godaddy官网</a>。先注册一个账号，然后搜索你想要的域名（例如本站的域名karubon.moe），如果这个域名没有被占用，你就会看到标价和加入购物车的按键。</p>
<p>就像在网上购买一件商品一样一路继续，填写个人信息和支付方式，看清楚订单里的商品再付款，千万不要花钱购买自己不想要的东西。</p>
<h4 id="配置DNS"><a href="#配置DNS" class="headerlink" title="配置DNS"></a>配置DNS</h4><p>下单之后最好不要着急，先坐和放宽大概30-60分钟，打打游戏看看书，然后再进行下面的操作，否则你可能会遇到各种奇怪的bug。</p>
<p>在Godaddy的页面中依序点击头像-&gt;我的产品-&gt;域名-&gt;管理全部，进入域名总览页面。<br><img src="/images/11.jpg" alt="Godaddy的页面"></p>
<p>进入域名总览页面后，你应该能看到你刚刚买的域名，旁边还有到期日期。没有到期日期的话就再等等，不要急着操作（）。</p>
<p>点击你刚买的域名，进入到对应的管理页面，点击DNS，进入DNS记录栏，你应该能看到里面有几条预设的记录。把里面唯一的一条类型为A、数据&#x2F;值为“停放”的记录删除，然后录入下面记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Type Name Valve               TTL</span><br><span class="line">A    @    185.199.108.153     默认</span><br><span class="line">A    @    185.199.109.153     默认</span><br><span class="line">A    @    185.199.110.153     默认</span><br><span class="line">A    @    185.199.111.153     默认</span><br><span class="line">AAAA @    2606:50c0:8000::153 默认</span><br><span class="line">AAAA @    2606:50c0:8001::153 默认</span><br><span class="line">AAAA @    2606:50c0:8002::153 默认</span><br><span class="line">AAAA @    2606:50c0:8003::153 默认</span><br></pre></td></tr></table></figure>

<p>配置好后，我们去配置GitHub Page。</p>
<h4 id="配置GitHub-Page"><a href="#配置GitHub-Page" class="headerlink" title="配置GitHub Page"></a>配置GitHub Page</h4><p>在博客文件根目录的source文件夹中创建一个名为“CNAME”的文件，注意这个文件没有后缀名。在文件中填入且仅填入你的域名，不加https，例如：<br><img src="/images/12.jpg" alt="CNAME"></p>
<p>这能避免在下一次部署博客时CNAME文件被意外删除导致你无法通过域名访问网站。</p>
<p>在GitHub网页上打开Page仓库的Page设置，在Custom domain选项中填入你的域名，同样不加https，然后保存，输入框的下方应该会出现DNS测试的提示，没有就刷新页面。例如：<br><img src="/images/13.jpg" alt="Page设置"></p>
<p>如果一切正常，会出现绿钩和DNS check successful。现在你可以通过这个域名访问你的网站。</p>
<p>但是你可能很快注意到，在你访问网站时，浏览器会提示不安全。这是因为网站没有配置SSL证书。这个时候不要着急，先坐和放宽大概30-60分钟（），然后回到Page仓库的Page设置页勾选Enforce HTTPS选项，GitHub Page会自动为你配置证书。如果你来得太早，你可能会遇到这个选项勾不上的问题。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p>Hexo官方中文文档(<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a>)</p>
<p>快速搭建个人博客——保姆级教程(<a href="https://pdpeng.github.io/2022/01/19/setup-personal-blog">https://pdpeng.github.io/2022/01/19/setup-personal-blog</a>)</p>
<p>利用Github Actions自动部署Hexo博客(<a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/</a>)</p>
<p>GitHub官方文档(<a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site">https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site</a>)</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>基于一阶互补滤波的MPU6050姿态解算</title>
    <url>/%E5%9F%BA%E4%BA%8E%E4%B8%80%E9%98%B6%E4%BA%92%E8%A1%A5%E6%BB%A4%E6%B3%A2%E7%9A%84mpu6050%E5%A7%BF%E6%80%81%E8%A7%A3%E7%AE%97/</url>
    <content><![CDATA[<p>当我们通过MPU6050进行姿态解算时，MPU6050给了我们两组数据：一组来自加速度计，一组来自陀螺仪。<span id="more"></span>两个传感器的数据都可以独自求得小车此时的角度，但它们也各自存在问题：加速度计比较敏感，由振动产生的瞬时误差比较大；陀螺仪积分得到的角度虽然受振动影响比较小，但随着时间的增加，积分误差和温度漂移会逐渐增大。从另一角度加以解释，就是加速度计主要受到高频噪声的影响，而陀螺仪主要受到低频噪声的影响。这两个传感器正好可以弥补相互的缺点。短时间用陀螺仪比较准确，长时间用加速度计比较准确；运动时用陀螺仪比较准确，静止时用加速度计比较准确，也就是互补。通过一阶互补滤波，我们滤除加速度计的高频部分，滤除陀螺仪的低频部分，并将这两个数据以一定权重相加，就能得到比较准确的角度了。</p>
<p>你能在其他资料里面看到二阶互补滤波和卡尔曼滤波。相比于这两种算法，一阶互补滤波的优势在于计算量少、收敛速度较快，对性能薄弱的芯片比较友好。虽然没有二阶互补滤波和卡尔曼滤波那么精确，但是对于我们的用途来说还在能接受的范围以内。</p>
<p>下面我们结合代码来说明基于一阶互补滤波的姿态解算的流程。</p>
<h2 id="自定义结构体"><a href="#自定义结构体" class="headerlink" title="自定义结构体"></a>自定义结构体</h2><p>为了让代码看起来更加优雅，我们先定义这样一个结构体，并且声明对应的变量，来储存我们需要的数据。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">float</span> Roll;<span class="comment">//解算所得角度</span></span><br><span class="line">    <span class="type">float</span> Pitch;</span><br><span class="line">    <span class="type">float</span> Yaw;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> Roll_a;<span class="comment">//加速度计计算得到的角度</span></span><br><span class="line">    <span class="type">float</span> Pitch_a;</span><br><span class="line">    <span class="type">float</span> Roll_g;<span class="comment">//陀螺仪计算得到的角速度</span></span><br><span class="line">    <span class="type">float</span> Pitch_g;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> lastRoll;<span class="comment">//上次的解算角度</span></span><br><span class="line">    <span class="type">float</span> lastPitch;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> offset_gx;<span class="comment">//陀螺仪零漂值</span></span><br><span class="line">    <span class="type">int</span> offset_gy;</span><br><span class="line">    <span class="type">int</span> offset_gz;</span><br><span class="line">&#125; IMU;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">IMU IMU_Data;</span><br></pre></td></tr></table></figure>

<h2 id="加速度计与陀螺仪的分别解算"><a href="#加速度计与陀螺仪的分别解算" class="headerlink" title="加速度计与陀螺仪的分别解算"></a>加速度计与陀螺仪的分别解算</h2><p>在这里我们以小车的Roll角（翻滚角），也就是单车需要保持平衡的那个角度为例，来解释如何通过加速度计与陀螺仪分别计算出角度。额外注意的是，本文的X轴指向小车前方，如下图所示，但别的资料不一定，在查阅其他资料时请多加留心。</p>
<p><img src="https://img-blog.csdnimg.cn/737d630b8f374474ba48cebbdab13863.jpeg" alt="三轴指示"></p>
<h3 id="加速度计"><a href="#加速度计" class="headerlink" title="加速度计"></a>加速度计</h3><p>加速度计通过以下方式计算Roll角：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">IMU_Data.Roll_a = <span class="built_in">atan2</span>(mpu6050_acc_x, mpu6050_acc_z) / (PI / <span class="number">180</span>);</span><br></pre></td></tr></table></figure>
<p>​<br>对数学上的推导过程感兴趣的朋友可以参考<a href="https://blog.csdn.net/hbsyaaa/article/details/108186892">这篇博客</a>，在这里不展开说明。总之，mpu6050_acc_x与mpu6050_acc_z是我们通过逐飞库提供的mpu6050_get_acc函数读取到的直接数据，通过上面的数学运算，我们得到的是根据加速度计算得的Roll角Roll_a，单位为度。atan2函数定义在math.h标准库中，使用前要先包含这个库。</p>
<p>如果要计算Pitch角（俯仰角），只需要把x改为y即可。遗憾的是，由于原理上的限制，我们无法用加速度计算出Yaw角（航向角）。</p>
<h3 id="陀螺仪"><a href="#陀螺仪" class="headerlink" title="陀螺仪"></a>陀螺仪</h3><p>陀螺仪的角速度转换为实际物理数据：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">IMU_Data.Roll_g = -(mpu6050_gyro_y) / <span class="number">14.3</span>;</span><br></pre></td></tr></table></figure>

<p>通过这个运算，我们能把MPU6050提供的陀螺仪数据转换成实际的物理数据，单位是度每秒，也就是角速度。我们只需要对角速度进行积分，就能得到角度了，这个处理我们放在一阶互补滤波的函数中。代码中是否要加负号取决于你的传感器芯片，14.3这个数字由陀螺仪的量程得出，如果用逐飞库的mpu6050_gyro_transition函数来转换的话应该就不用关心这个数字了。</p>
<p>同样的，如果要计算Pitch角，只需要把y改为x即可。你甚至可以用Z轴的数据算出Yaw角，不过，就像我们上面提到的，随着时间的推移，误差将不断增大。要弥补这一误差，你可以结合GNSS（全球卫星导航系统）的数据，但这不在本文的讨论范围之内。</p>
<h2 id="一阶互补滤波过程"><a href="#一阶互补滤波过程" class="headerlink" title="一阶互补滤波过程"></a>一阶互补滤波过程</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Ka 0.80  <span class="comment">// 加速度解算权重</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> dt 0.005 <span class="comment">// 采样间隔（单位：秒）</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">float</span> <span class="title function_">FOCF</span><span class="params">(<span class="type">float</span> acc_m, <span class="type">float</span> gyro_m, <span class="type">float</span>* last_angle)</span> &#123;</span><br><span class="line">    <span class="type">float</span> temp_angle;</span><br><span class="line">    temp_angle = Ka * acc_m + (<span class="number">1</span> - Ka) * (*last_angle + gyro_m * dt);</span><br><span class="line">    *last_angle = temp_angle;</span><br><span class="line">    <span class="keyword">return</span> temp_angle;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">IMU_Data.Roll = FOCF(IMU_Data.Roll_a, IMU_Data.Roll_g, &amp;IMU_Data.lastRoll);</span><br></pre></td></tr></table></figure>

<p>在分别处理好加速度计与陀螺仪的数据之后，现在要将两个数据互补在一起。我们定义一个名为FOCF的函数，用于处理这一数学过程。这个函数接受处理好的数据和上次解算结果的储存地址作为参数。</p>
<p>首先，我们将陀螺仪解算出的角速度与采样间隔相乘，得到自上次采样以来的角度变化量。通过将上一次解算结果与这个变化量相加，我们就能得到由陀螺仪计算得到的新的Roll角。</p>
<p>接着，我们将加速度解算所得的角度与陀螺仪解算所得的角度按照权重因子进行加权相加，从而得到最终的解算结果。这个权重因子需要根据实际情况进行调整。</p>
<p>在计算完成后，我们更新*last_angle，以备下一次解算使用。最终，将计算得到的角度作为结果返回，你就能在其他函数中读取IMU_Data.Roll，最终保持你的单车的平衡。</p>
<p>Pitch角也是同理。</p>
<h2 id="在解算之前…"><a href="#在解算之前…" class="headerlink" title="在解算之前…"></a>在解算之前…</h2><p>不幸的，你接上陀螺仪后发现，即使你不去触动它，它的数据也不为0，这是工艺上不可避免的误差造成的。幸运的是，这个误差在每一次运行过程中变化不大，让我们可以用简单的方法把它的影响降到最小。</p>
<p>现在我们定义一个去除零漂的函数IMU_offset，并在每次单片机启动时调用它。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> OFFSET_COUNT 200</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">IMU_offset</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; OFFSET_COUNT; i++) &#123;</span><br><span class="line">        system_delay_ms(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">if</span> (mpu6050_gyro_x == mpu6050_gyro_y) &#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            IMU_Data.offset_gx += mpu6050_gyro_x;</span><br><span class="line">            IMU_Data.offset_gy += mpu6050_gyro_y;</span><br><span class="line">            IMU_Data.offset_gz += mpu6050_gyro_z;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    IMU_Data.offset_gx /= OFFSET_COUNT;</span><br><span class="line">    IMU_Data.offset_gy /= OFFSET_COUNT;</span><br><span class="line">    IMU_Data.offset_gz /= OFFSET_COUNT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>既然变化不大，我们只需要求其平均值，然后在每次采样时减去它就好了。这个函数就起求平均值这个作用。OFFSET_COUNT是你要采集的数据量，只要取一个恰当的数值即可。system_delay_ms(5)中的5是你规定的采样间隔。</p>
<p>考虑到实际应用中有时会出现杜邦线接触不良的情况，在代码中做了一个简单的判断。当发生接触不良的时候，X轴数据会与Y轴数据相同（通常均为0，但偶有意外），我们就认为数据是无效的。这是在被杜邦线困扰已久之后摸索出的野路子，权当参考。</p>
<h2 id="综上所述"><a href="#综上所述" class="headerlink" title="综上所述"></a>综上所述</h2><p>当我们完成了上面所有的代码之后，是时候调用它们了。去零漂的函数要在启动时调用，也就是main函数的开头部分。为了保证我们的采样间隔恒定不变，我们需要将函数放在定时器的中断处理函数中执行。代码分为两个部分：第一个部分你要从MPU6050中读取原始的数据，并将陀螺仪的原始数据减去你计算出的零漂值；第二个部分你要分别处理加速度计与陀螺仪的数据，然后进行一阶互补滤波。</p>
<p>（感觉这玩意各种意义上都写得好烂……）</p>
<blockquote>
<p>之前报名了第十八届全国大学生智能车竞赛的单车越野组别，但由于种种原因最终未能完赛。所以打算把自己做好的一部分发出来，同时也是对自己过去一个多学期生活的一点总结。</p>
<p>代码基于<a href="https://gitee.com/seekfree/CHV307_Library">逐飞科技的CH32V307开源库</a>。</p>
</blockquote>
<blockquote>
<p>​ 参赛的代码早些时候已经上传到<a href="https://github.com/ChaoiteC/BIKE_OFF_ROAD">Github</a>。</p>
</blockquote>
<blockquote>
<p>这篇博客最早于2023年8月3日凌晨<a href="https://blog.csdn.net/CsdnAKinKo/article/details/132053654">在CSDN上</a>写成并发布。在这里略作了修改。</p>
</blockquote>
]]></content>
      <categories>
        <category>智能车竞赛</category>
      </categories>
      <tags>
        <tag>MPU6050</tag>
        <tag>姿态解算</tag>
      </tags>
  </entry>
</search>
