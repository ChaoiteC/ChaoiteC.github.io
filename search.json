[{"title":"网络文学：自由与多元发展的时代新篇","url":"/网络文学：自由与多元发展的时代新篇/","content":"随着互联网的迅猛发展和移动设备的普及，网络文学迅速崛起，成为当代文化领域的一大现象。它凭借便捷的创作方式和广泛的传播渠道，吸引了无数作者和读者，形成了一种全新的文学生态。然而，在网络文学蓬勃发展的同时，也伴随着一系列值得深思的问题。网络文学的爆火，究竟是文学的繁荣盛景，还是潜藏隐忧的泡沫？本文将从多个角度加以探讨。\n\n网络文学的最大优势在于创作的民主化。传统文学的出版门槛较高，作者往往需要经过严格的审核和漫长的出版流程，许多有才华的创作者因此被拒之门外。而网络文学则打破了这种壁垒，使得任何人都可以成为作者，在网络平台上发表自己的作品，与读者直接互动。这种开放性的创作环境，极大地激发了大众的创作热情，使文学从少数人的专属变成了人人皆可参与的文化活动。\n\n此外，网络文学的传播速度极快，受众范围极为广泛。相比于传统纸质出版，网络文学依托互联网技术，能够迅速传播至全球各地，吸引大量读者，并形成强大的粉丝群体。这不仅为创作者提供了更多的曝光机会，也催生了新的商业模式，使优秀的网络文学作品有机会转化为影视、动漫、游戏等多种形式。\n\n网络文学的题材丰富多样，能够满足不同读者的需求。无论是玄幻、科幻、言情，还是历史、悬疑，网络文学的包容性极强，打破了传统文学的题材局限，为读者提供了更加多元的阅读选择。同时，网络文学的形式也在不断创新，互动小说、弹幕小说等新兴模式，使文学表达更具时代感和参与感。\n\n尽管网络文学的发展充满活力，但不可忽视的是，其快速增长也带来了一些问题。首先，作品质量参差不齐，部分作品为迎合市场需求，过度追求商业化，导致内容缺乏深度，情节趋于套路化和同质化。许多网络小说依赖高频更新吸引读者，导致作者在创作过程中难以兼顾艺术性和思想性，影响了整体文学水准。快餐式的消费模式，使得部分读者更倾向于轻松、短平快的阅读体验，而忽视了对经典文学的深入品读。这种阅读习惯的改变，可能会影响传统文学的传承，使经典文学的影响力逐渐弱化。\n\n面对网络文学的繁荣与隐忧，我们不能简单地加以否定，而应在肯定其积极作用的同时，寻求合理的改进路径。总体而言，网络文学的兴起，既是文学传播方式的重大变革，也是一场推动大众创作的文化革命。尽管其发展过程中存在诸多挑战，但其为文学大众化、创作自由化和文化创新带来的积极影响不可忽视。只要我们能够妥善应对其中的问题，网络文学必将在未来焕发出更加璀璨的光彩，成为新时代文学发展的重要力量。\n","tags":["杂谈"],"categories":["创作"]},{"title":"十四行诗：政治的伟大","url":"/十四行诗：政治的伟大/","content":"无论是欢乐、尊严，或是荣名，\n\n平安、强健，或是技艺、武功，\n\n都不关照暴政驯训成熟的顺民；\n\n诗歌，不回应他们的一声心音，\n\n历史，不过是他们耻辱的阴影，\n\n艺术遮蔽明镜，或是闭上眼睛，\n\n当他们成千百万地盲目飞奔着\n\n投入寂灭，以猥琐不洁的形象\n\n玷污天国。凭暴力或旧习纠合\n\n成群的人算得什么？人，要想\n\n成为人，须能主宰自身的帝国，\n\n在自我克制的意志上建立王廷，\n\n敉平他内心希望和恐惧的蛊惑\n\n和叛乱，完全成为他自己本人。\n\n1821年\n\n---\n\n摘自《雪莱诗选》。版权属于作者。\n"},{"title":"敬过去。","url":"/敬过去。/","content":"\n就像平常一样，躺在床上做了一个梦。\n\n梦里面所有我以为忘记或者不在意的事物都涌了出来，织成一幅奇怪的画卷。\n\n就像平常一样地坐上公交车，那就是最后一次回到那里了；\n\n就像平常一样地接听视频电话，那就是最后一次见到那人了。\n\n2024年10月26日\n"},{"title":"数字信号处理总结20240927","url":"/数字信号处理总结20240927/","content":"## 提纲\n\n### 序列的基本运算\n\n序列加法:把两序列同序号的序列值逐项对应相加。\n\n序列乘法:把两序列同序号的序列值逐项对应相乘。\n\n### 序列的倍乘 y(n)=ax(n)\n\n把序列中所有序号下的序列值同乘一个常数a。\n\n### 序列的移位 y(n)-x(n-m)\n\n当 m 为正时，x(n-m)表示依次右移 m 个序数(延时)；x(n + m)表示依次左移 m 个序数(超前)\n\n### 序列的翻转 y(n)=x(-n)\n\n以 n=0 为对称轴将 x(n) 加以反转的序列。\n\n### 序列的尺度变换:抽取(压缩)和内插(扩展)\n\nx(mn)表示序列每m点取一点，称为**序列的压缩或抽取**。\n\nx(n/m)表示把原序列两相邻值之间插入m-1个零值，称为**序列的伸展或内插零值**。\n\n### 卷积\n\n$$\ny(n)=\\sum_{m=-\\infty}^{\\infty}x(m)h(n-m)=\\sum_{m=-\\infty}^{\\infty}h(m)x(n-m)=x(n)*h(n)\n$$\n\n   卷积符号（\\*）\n\nx(n)和h(n)求卷积，表达式为*m从负无穷到正无穷x(m)乘于h(n-m)*，因为线性，因此可以交换。\n\n1. 图解法\n      翻转:先在变量坐标m上作出 x(m)和 h(m)，将 h(m)以m=0为对称轴翻转成 h(-m)。\n      移位:将h(-m)移位n，即得h(n-m)。当n为正整数时，左移n位;当n为负整数时，右移-n位。\n      相乘:再将 h(n-m) 和 x(m) 的对应点值相乘.\n      相加:把以上所有对应点的乘积累加，得y(n)值。\n2. 序列阵表法\n      对角元素相加。\n3. 多项式乘法\n      将 x(n)和 h(n)写成多项式系数，进行多项式乘法运算。\n4. 对位相乘(有限长序列卷积)\n      原则:\n      两序列右对齐\n      按位对应相乘**不进位**\n      同列乘积值相加(注意n=0的位置)\n\n\n\n## 讲稿\n\n### 1. 序列的基本运算\n\n首先，我们来看一下**序列的加法和乘法**。假设我们有两个长度相同的序列 \\( x(n) \\) 和 \\( y(n) \\)：\n\n- **序列加法**：把两序列同序号的值逐项相加，即：\n  \n  \\[\n  z(n) = x(n) + y(n)\n  \\]\n\n- **序列乘法**：把两序列同序号的值逐项相乘，即：\n\n  \\[\n  z(n) = x(n) \\times y(n)\n  \\]\n\n这两种运算的特点是**序列长度相同，且相同位置上的元素进行对应运算**。\n\n### 2. 序列的倍乘\n\n倍乘运算是指序列中的每一个值都乘以同一个常数。设 \\( x(n) \\) 是原序列，常数为 \\( a \\)，则倍乘后的序列为：\n\n\\[\ny(n) = a \\times x(n)\n\\]\n\n这种运算的效果是将整个序列的幅值按比例放大或缩小。\n\n### 3. 序列的移位\n\n移位运算的含义是**改变序列值所在的位置**，从而引起序列的**延时**或**超前**。\n\n- 若序列为 \\( x(n) \\)，移位后的序列为 \\( y(n) = x(n - m) \\)，则表示序列右移 \\( m \\) 个位置，称为**延时**。\n  \n- 若移位后的序列为 \\( y(n) = x(n + m) \\)，表示序列左移 \\( m \\) 个位置，称为**超前**。\n\n### 4. 序列的翻转\n\n序列的翻转是以 \\( n = 0 \\) 为对称轴将序列反转，表达式为：\n\n\\[\ny(n) = x(-n)\n\\]\n\n翻转后的序列形状发生改变，但对称性保持不变。\n\n### 5. 序列的尺度变换\n\n尺度变换包含**抽取**和**内插**两个操作：\n\n- **抽取**：从原序列中每隔 \\( m \\) 个点取一个值，形成新的序列 \\( x(mn) \\)，称为**序列的压缩**。\n\n- **内插**：在原序列中插入零值，将相邻值间的间隔扩展。插入 \\( m-1 \\) 个零值后，形成新的序列 \\( x(n/m) \\)，称为**序列的扩展**或**内插**。\n\n### 6. 序列的卷积\n\n卷积是两个序列之间的重要运算，用于分析和合成系统输出。假设 \\( x(n) \\) 和 \\( h(n) \\) 是两个序列，它们的卷积定义为：\n\n\\[\ny(n) = \\sum_{m=-\\infty}^{\\infty} x(m) h(n-m)\n\\]\n\n我们可以把卷积符号表示为 \\( x(n) * h(n) \\)。卷积的结果就是**两个序列按一定规则进行相乘并累加的运算结果**。下面介绍几种常用的卷积求解方法：\n\n1. **图解法**：\n   - **翻转**：将 \\( h(m) \\) 以 \\( m = 0 \\) 为对称轴翻转，得到 \\( h(-m) \\)。\n   - **移位**：将 \\( h(-m) \\) 向左或向右平移 \\( n \\) 个位置，形成 \\( h(n-m) \\)。\n   - **相乘**：将 \\( h(n-m) \\) 和 \\( x(m) \\) 的每个对应值相乘。\n   - **相加**：将以上乘积的所有结果相加，得到卷积值 \\( y(n) \\)。\n\n2. **序列阵表法**：\n   - 将两个序列列出并对角相加，求得每一列的值，从而得到卷积结果。\n\n3. **多项式乘法**：\n   - 将两个序列分别写成多项式，再进行多项式的乘法运算，得到卷积的结果。\n\n4. **对位相乘法（有限长序列）**：\n   - 将两序列从右对齐，然后逐个位置相乘并累加，注意**不进位相加**。\n\n### 结语\n\n以上是序列的基本运算和卷积的几种求解方法。序列的运算在信号处理、控制理论等领域具有广泛的应用。理解这些基本操作，将有助于分析更复杂的系统模型。","tags":["杂谈"],"categories":["创作"]},{"title":"想法一点","url":"/想法一点/","content":"\nA.3. 国际合作达到一个更高的水平——一个真正意义上的国际化的权力机关，构建新的生产模式与消费模式；消除公开的偏见与暗藏的障碍，在不践踏自由的情况下走向平等，实现在自我管理的社会中保证个人自由的的组织与制度；普选、新闻与表达的自由、观点斗争的自由，权力由下至上的流动；劳动与闲暇的界限消失，分工变成纯粹的功能性，多余的国家机器枯萎，进行民主的社会控制。\n\nA.4. 人剥削人——或者说在典型的模型中——资本家对工人的统治，是一种物对人的支配、死劳动对活劳动的支配的人格化的体现。在对应的制度下，劳动达到了最极端的异化形式——不仅劳动者的产品与劳动者相异化，而且他的活动方式也与他相异化。劳动不是“生命的第一需要”，而是变成了单纯的谋生手段。资本家不仅购买了劳动力，而且通过机器、工厂制度等手段，对生产过程进行了彻底的改造。机器和技术不仅提高了生产效率，还使劳动者的技能和经验变得相对次要。工人逐渐成为生产过程中的一个附属部分，因而无法抗拒这种物对人的反向的支配，也即劳动对资本的现实服从。正是这种支配关系，使积累起来的劳动转化成了资本，使活劳动者的能量变成仅仅是使死劳动扩张的手段，变成了一种与直接生产者分离并且对他进行剥削的力量。\n","tags":["杂谈"],"categories":["创作"]},{"title":"中国共产党为什么能？","url":"/中国共产党为什么能？/","content":"近代中国经历了饿殍遍地、任人宰割、被帝国主义欺凌的黑暗时期，中国人在自己的土地上也成了二等公民。在这样的背景下，无数仁人志士在寻找救国救民的道路，其中李大钊、陈独秀、毛泽东、周恩来等人为了共同的信仰汇聚在一起，成立了中国共产党。中国共产党从成立之初就肩负着挽救民族危亡、实现国家独立的重任。那么，中国共产党为什么能在复杂多变的历史背景中脱颖而出，成为中国历史上最重要的政治力量？\n\n中国共产党自成立以来，就坚持以马克思主义为指导，致力于推翻帝国主义、封建主义和官僚资本主义三座大山的压迫，建立一个独立、民主、富强的新中国。党的理想信念在革命战争年代得到了充分体现。1927年，蒋介石发动“四一二”反革命政变，大肆屠杀共产党员和革命群众，第一次国内革命战争失败。但是中国共产党没有因此而屈服，而是从失败中吸取教训，坚定了武装斗争的路线，进行秋收起义、井冈山会师，逐步形成了以农村包围城市、武装夺取政权的革命道路。井冈山根据地的建立，标志着中国共产党在探索中国革命道路上的重大突破。\n\n中国共产党善于根据具体情况灵活调整战略战术。在抗日战争时期，国共两党合作，共同抗击日本侵略者。1937年，全面抗战爆发后，中国共产党提出了“坚持抗战、团结到底”的口号，深入敌后，发动群众，建立抗日根据地，开展游击战争，有效地牵制和打击了日军。这一时期，敌后抗日根据地的发展，为中国共产党积累了丰富的战争经验，也锻炼了一大批优秀的军事和政治干部，为最终战胜日本侵略者、实现全国解放打下了坚实基础。\n\n中国共产党始终坚持群众路线，密切联系群众，依靠群众。土地革命时期，通过开展土地改革，废除封建土地制度，解决了农民的土地问题，赢得了广大农民的支持。抗日战争时期，通过减租减息政策，减轻了农民的负担，提高了他们的抗战积极性。解放战争时期，通过开展整风运动，纠正党内错误思想，增强了党的凝聚力和战斗力。正是由于中国共产党始终站在人民群众的立场上，赢得了广大人民群众的信任和支持，才能够在革命斗争中不断壮大。\n\n中国共产党始终重视自我革新，不断总结经验教训，提高自身的执政能力和领导水平。延安整风运动期间，中国共产党通过批评与自我批评，总结经验教训，纠正了党内的各种错误思想，进一步统一了思想，增强了党的凝聚力和战斗力。新中国成立后，中国共产党在社会主义建设中遇到了一些挫折和困难，但党能够通过自身的改革和调整，逐步探索出适合中国国情的发展道路。改革开放以来，中国共产党通过大胆的改革和开放政策，推动了中国经济的快速发展，综合国力显著增强，人民生活水平大幅提高。\n\n所以，中国共产党之所以能够在中国近现代历史上发挥重要作用，并最终取得全国政权，离不开坚定的理想信念与目标、灵活的战略战术与组织领导、广泛的群众基础与群众路线以及不断的自我革新与发展。正是这些因素，使中国共产党能够在复杂多变的历史环境中，带领中国人民走向独立、民主、富强的道路，实现中华民族的伟大复兴。\n","tags":["杂谈"],"categories":["创作"]},{"title":"SIC实验室23届第十次学习目标","url":"/sic实验室23届第十次学习目标/","content":"\n![SIC-LOGO](images/SIC.png)\n\n**<center>- 立足培养、重在参与、鼓励探索、追求卓越 -</center>**\n\n## 前言\n\n![GUGU](images/GU-GU.jpg)\n\n## 学习内容\n\n### 自定义代码文件\n\n在逐飞库中，有<code>./project/code</code>这样一个文件夹，用于储存我们自行编写的代码文件。\n\n我们以一份用于进行一阶互补滤波姿态解算的代码文件为例，演示添加、编写和调用自行编写的代码时需要注意的地方。\n\n在<code>./project/code</code>目录下新建名为<code>imu.c</code>和<code>imu.h</code>的文件。\n\n我们先把代码内容摆在这里。\n\n``` /* imu.c */\n\n#include \"zf_common_headfile.h\"\n#include <math.h>\n\n#define Ka 0.90  // 加速度解算权重\n#define dt 0.005 // 采样间隔（单位：秒）\n\n#define OFFSET_COUNT 200 // 零漂测定数据量\n\n#define ANGLE_APPROX_COEFF 0 // 航向角逼近系数\n\nIMU IMU_Data;\n\nfloat FOCF (float acc_m, float gyro_m, float* last_angle) {\n    float temp_angle;\n    temp_angle = Ka * acc_m + (1 - Ka) * ( *last_angle + gyro_m * dt); // 角速度对采样间隔积分加上上次解算角度即为从陀螺仪中推出的角度\n    *last_angle = temp_angle;\n    return temp_angle;\n}\n\n/* @fn IMU_update\n * @brief 在定时器中姿态解算\n * @return void\n */\nvoid IMU_update () {\n    // 数据处理\n    IMU_Data.Roll_a = atan2(imu963ra_acc_x, imu963ra_acc_z) / (PI / 180); // ax除以az再求反正切函数即为从加速度计中推出的角度\n    IMU_Data.Pitch_a = atan2(imu963ra_acc_y, imu963ra_acc_z) / (PI / 180);\n    IMU_Data.Roll_g = -(imu963ra_gyro_y) / 14.3; // 从陀螺仪中推出的角速度，14.3根据陀螺仪量程所得\n    IMU_Data.Pitch_g = -(imu963ra_gyro_x) / 14.3;\n    \n    // 一阶互补滤波\n    IMU_Data.Roll = FOCF(IMU_Data.Roll_a, IMU_Data.Roll_g, &IMU_Data.lastRoll);\n    IMU_Data.Pitch = FOCF(IMU_Data.Pitch_a, IMU_Data.Pitch_g, &IMU_Data.lastPitch);\n\n    IMU_Data.Yaw += -(imu963ra_gyro_z) / 14.3 * dt;\n\n    // Yaw角修正\n    if (IMU_Data.Yaw < gps_tau1201.direction) {\n        IMU_Data.Yaw += ANGLE_APPROX_COEFF;\n    }\n    else if (IMU_Data.Yaw > gps_tau1201.direction) {\n        IMU_Data.Yaw -= ANGLE_APPROX_COEFF;\n    }\n}\n\n//陀螺仪去零漂\nvoid IMU_offset () {\n    oled_clear();\n    oled_show_chinese(0, 0, 16, (const uint8 *)IMU_OFFSET_1, 5);\n    oled_show_chinese(0, 6, 16, (const uint8 *)IMU_OFFSET_2, 8);\n    oled_show_string(0, 3, \"Count:    /200\");\n    for (int i = 0; i < OFFSET_COUNT; i++) {\n        oled_show_int(36, 3, i, 3);\n        system_delay_ms(5);\n        if (imu963ra_gyro_x == imu963ra_gyro_y) {\n            i--;\n            oled_show_string(0, 4, \"WARNING: IMU NO DATA\");\n        }\n        else {\n            IMU_Data.offset_gx += imu963ra_gyro_x;\n            IMU_Data.offset_gy += imu963ra_gyro_y;\n            IMU_Data.offset_gz += imu963ra_gyro_z;\n        }\n    }\n    IMU_Data.offset_gx /= OFFSET_COUNT;\n    IMU_Data.offset_gy /= OFFSET_COUNT;\n    IMU_Data.offset_gz /= OFFSET_COUNT;\n}\n\nvoid IMU_get_data(){\n    imu963ra_get_acc(); // 获取 IMU963RA 的加速度测量值\n    imu963ra_get_gyro(); // 获取 IMU963RA 的角速度测量值\n    imu963ra_gyro_x -= IMU_Data.offset_gx;\n    imu963ra_gyro_y -= IMU_Data.offset_gy;\n    imu963ra_gyro_z -= IMU_Data.offset_gz;\n}\n```\n\n``` /* imu.h */\n\n#ifndef _IMU_H_\n#define _IMU_H_\n\n#include \"zf_common_headfile.h\"\n\ntypedef struct {\n    float Roll; // 解算所得角度\n    float Pitch;\n    float Yaw;\n\n    float Roll_a; // 加速度计算得到的角度\n    float Pitch_a;\n    float Roll_g; // 陀螺仪计算得到的角速度\n    float Pitch_g;\n\n    float lastRoll; // 上次的解算角度\n    float lastPitch;\n\n    int offset_gx; // 陀螺仪零漂值\n    int offset_gy;\n    int offset_gz;\n} IMU;\n\nextern IMU IMU_Data;\n\nvoid IMU_update();\nvoid IMU_offset();\nvoid IMU_get_data();\n\n#endif /* _IMU_H_ */\n```\n\n#### 包含头文件\n\n<q>C语言通过预处理器提供了一些语言功能。从概念上讲，预处理器是编译过程中单独执行的第一个步骤。两个最常用的预处理器指令是：#include指令（用于在编译期间把指定文件的内容包含进当前文件中）和#define指令（用任意字符序列替代一个标记）。 </q>\n\n<q>源文件的开始处通常都会有多个#include指令，它们用以包含常见的#define语句和extern声明，或从头文件中访问库函数的函数原型声明。（严格地说，这些内容没有必要单独存放在文件中；访问头文件的细节同具体的实现有关。） </q>\n\n<q>在大的程序中，#include指令是将所有声明捆绑在一起的较好的方法。它保证所有的源文件都具有相同的定义与变量声明，这样可以避免出现一些不必要的错误。很自然，如果某个包含文件的内容发生了变化，那么所有依赖于该包含文件的源文件都必须重新编译。</q>\n\n——C程序设计语言（Kernighan, Ritchie）\n\n在<code>./libraries/zf_common/</code>目录下，有一个名为<code>zf_common_headfile.h</code>的文件，该文件下包含逐飞库中所有的头文件，进而声明了逐飞库中可以由用户调用的函数、变量与数据类型。此外，文件中也预留了“用户自定义文件”的位置，<em>你可以在这个位置进行编辑来将你的代码包含在内</em>。\n\n![用户自定义文件](images/24.jpg)\n\n一旦你在自己的代码文件中包含了zf_common_headfile.h，你将可以在这个文件中调用逐飞库当中声明的函数、变量与数据类型。\n\n#### 保护宏\n\n在C语言中，保护宏（Guard Macros）是一种常用的技术，用于避免头文件被多次包含。在大型项目中，一个头文件可能会被多个其他源文件引用，如果不使用保护宏，可能会导致同一头文件被多次包含，从而导致重复定义的问题。为了解决这个问题，可以使用保护宏来确保头文件只被包含一次。\n\n保护宏通常使用#ifndef、#define、#endif等预处理指令来实现。\n\n在我们用以示范的imu.h中，是这样实现的：\n\n```\n#ifndef _IMU_H_\n#define _IMU_H_\n\n/* 代码内容 */\n\n#endif /* _IMU_H_ */\n```\n\n在示例中：\n\n- _IMU_H_是一个自定义的标识符，通常由头文件名加上下划线避免重复。逐飞库中主要有三种命名风格：__IMU_H、_IMU_H或者_IMU_H_，本文使用最后一种风格。\n- #ifndef（如果未定义）、#define（定义）和 #endif（结束）组合在一起，形成了一个条件编译的区域。\n- 如果_IMU_H_未定义，则#ifndef下的代码块会被执行，此时会定义_IMU_H_，并包含头文件内容。\n- 如果_IMU_H_已经定义，则#ifndef下的代码块会被忽略，避免了头文件被重复包含。\n\n这种技术确保了头文件只被包含一次，从而避免了重定义的问题，提高了代码的可移植性和可维护性。\n\n#### extern关键字\n\nextern关键字在C语言中应用于C变量（数据对象）和C函数。基本上，extern关键字扩展了C变量和C函数的可见性。\n\n为了保险起见，让我们再次强调一下变量或函数的“声明”和“定义”的区别。\n\n变量或函数的**声明**只是声明该变量或函数在程序的某个地方存在，但并未为它们分配内存。变量或函数的声明起着重要的作用——它告诉程序其类型将是什么。在函数声明的情况下，它还告诉程序参数、它们的数据类型、这些参数的顺序以及函数的返回类型。所以这就是声明的全部内容。\n\n而当我们**定义**一个变量或函数时，除了声明的所有内容外，程序还为该变量或函数分配内存。因此，我们可以将定义视为声明的超集（或将声明视为定义的子集）。\n\n> 虽然没什么必要，但提一下，extern是external的缩写。\n\n当我们需要从另一个文件访问被定义的变量时，会使用extern关键字，像这样：\n\n```\nextern data_type variable_name;\n\n/* 或者用我们的示范代码： */\n\nextern IMU IMU_Data;\n```\n\n当我们写下extern some_data_type some_variable_name时，不会分配内存。只是宣布了变量的属性。extern变量告诉编译器：“离开我的范围，你会找到我声明的变量的定义。”编译器相信extern变量所说的一切都是真实的，并且不会产生错误。此外当链接器发现不存在这样的变量时会抛出错误。\n\n在编写C语言代码时，我们需要注意：\n\n- **声明**可以进行任意次数，但**定义**只能进行一次。\n- extern关键字用于扩展变量/函数的可见性。\n- 由于函数在整个程序中默认是可见的，因此在函数的声明或定义中不需要使用extern关键字。它的使用是隐式的。\n- 当extern与变量一起使用时，只是*声明*，而不是*定义*。\n- 作为例外，当使用**初始化**声明 extern 变量时，它也被视为变量的*定义*。\n\n<hr>\n\n> 此外，虽然内容不构成一节，但还是有必要提醒一个常见的错误——不要在声明结构体的时候初始化变量。\n\n### 屏幕、按键或者其他外设\n\n看完这些理论性质的东西，我们把目光重新聚焦在逐飞库上。\n\n逐飞库下的zf_device文件夹中提供了各种可能使用的外设硬件的驱动代码。\n\n利用精妙的设计与特性，逐飞库提供了一种类似面向对象编程（Object-Oriented Programming，简称OOP）的体验。如果我们将每个外设各视为一个实体（Entity），则逐飞库将各个外设分别抽象（Abstraction）为一个对象（Object），每一组关于该外设的文件即是一个类（Class），通过将对象的状态State——属性Attributes和行为Behaviors——方法Method打包在一起，形成逻辑独立的单元，并隐藏对象的内部细节，只暴露必要的接口（Interface）。逐飞库甚至一定程度上实现了多态（Polymorphism），例如对DEBUG信息的处理。\n\n这使我们在使用外设时，不用（或极少）关心外设在硬件层面上的实现（也可以说：你不必去了解你要怎么处理寄存器，或者更麻烦的东西）甚至是一些软件层面上的实现。\n\n通常来说，你在购买逐飞公司开发的外设或者学习板时，将会得到附带的使用例程。当我们翻阅了足够多的例程，我们容易注意到这些例程的共通之处——它们都会在程序的开头进行初始化。出于维护性的考虑，我们可以把这些初始化的过程集中在一个函数中，同时你还可以为它们编写一个图形加载页面。\n\n### 用户界面\n\n<q>用户界面是介于用户与硬件而设计彼此之间交互沟通相关软件，目的在使得用户能够方便有效率地去操作硬件以达成双向之交互，完成所希望借助硬件完成之工作，用户界面定义广泛，包含了人机交互与图形用户界面，凡参与人类与机械的信息交流的领域都存在着用户界面。</q>\n\n——维基百科，自由的百科全书\n\n我们在开发与调试智能车时，常常需要查看各种外设反馈的数据和算法的计算结果，有时还需要调整算法中的各个参数。在使用GPS的组别中，可能还需要录入不同的GPS点位。显然，我们不可能在每次读取和修改参数时都连接电脑进行烧录。这便要求我们编写一个程序，通过屏幕与按键完成上述的任务。我们称之为用户页面（UI）。（在本实验室，有时也称为菜单）\n\n#### 状态机与基于状态机编程\n\n为了便于理解UI的编写方法，我们先引入状态机这个概念。\n\n有限状态机（英语：finite-state machine，缩写：FSM）又称有限状态自动机（英语：finite-state automaton，缩写：FSA），简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学计算模型。它是一种抽象机器，在任何给定时间内只能处于有限数量的状态之一。有限状态机可以根据一些输入从一个状态变换到另一个状态；从一个状态到另一个状态的变换称为转换。一个FSM由其状态列表、其初始状态和触发每个转换的输入定义。有限状态机有两种类型——确定有限状态机和非确定有限状态机。对于任何非确定性有限状态机，都可以构造一个等价的确定性有限状态机。\n\n状态机的行为可以在现代社会的许多设备中观察到，这些设备根据它们所接收到的事件序列执行预先确定的一系列动作。简单的例子包括：**自动售货机**，在适当的硬币组合存入时提供产品；**电梯**，其停止的顺序由乘客请求的楼层确定；**交通信号灯**，在车辆等待时更改序列；**密码锁**，需要按正确顺序输入一系列数字。\n\n有限状态机的优点之一是它可以帮助我们清晰地理解系统的行为，以及在不同状态下可能发生的事件和转换。这使得在设计和调试系统时更加容易。\n\n<hr>\n\n现在我们看看**基于自动机编程**。\n\n自动机编程（英语：Automata-based programming）是编程范型中的一种，是指程序或其中的部分是以有限状态机（FSM）为模型的程序，有些程序则会用其他型式（也更复杂）的自动机为其模型。\n\n有限状态机编程（英语：FSM-based programming）大致上等同于自动机编程，但有限状态机编程专指以有限状态机为模型的程序。\n\n自动机编程有以下的二项特征：\n\n- 程序执行的时间中可以清楚划分成数个自动机的步骤（step），每一个步骤即为一个程序区段，有单一的进入点，可以是一个函数或其他程序。若有需要时，程序区段可以再依其状态的不同，划分为子区段。\n- 不同步骤的程序区段只能透过一组清楚标示的变量交换信息，这些变量称为状态（state），使用自动机编程的程序不能用其他不显然可见的方式标示状态，例如区域变量的数值、回传地址、目前程序指针的位置等。因此一程序在任二个不同时间下的差异，只有状态数值的不同，其余都相同。\n\n自动机编程的执行过程是一个由自动机步骤形成的循环。\n\n自动机编程中处理问题的思考方式很类似在利用图灵机、马尔可夫算法处理问题时的思考方式。\n\n例如，考虑一个C语言的程序，由标准输入流一行一行的读取资料，打印各一行的第一个英文单词。因此一开始需确认第一个英文单词之前是否有空白，若有，需读取所有空白后略过不打印，读取第一个英文单词然后打印，之后读取其他内容略过不打印，直到读到换行符号为止。任何情形下只要读到换行符号，就重新开始此算法，任何情形下只要读到文件结束（end-of-file）的符号，就退出程序。\n\n以下是传统指令式编程的C语言程序：\n\n```\n#include <stdio.h>\nint main(void)\n{\n    int c;\n    do {\n        c = getchar();\n        while(c == ' ')\n            c = getchar();\n        while(c != EOF && c != ' ' && c != '\\n') {\n            putchar(c);\n            c = getchar();\n        }\n        putchar('\\n');\n        while(c != EOF && c != '\\n')\n            c = getchar();\n    } while(c != EOF);\n    return 0;\n}\n```\n\n上述问题也可以用有有限状态机的方式处理，此程序有三个不同的阶段：读取并跳过第一个单词前的空白、读取第一个单词并且打印、跳过后续的所有字符。以下将这三个阶段定义为三个状态before、inside及after。自动机编程的程序如下：\n\n```\n#include <stdio.h>\nint main(void)\n{\n    enum states {\n        before, inside, after\n    } state;\n    int c;\n    state = before;\n    while((c = getchar()) != EOF) {\n        switch(state) {\n            case before:\n                if(c == '\\n') {\n                    putchar('\\n');\n                } else\n                if(c != ' ') {\n                    putchar(c);\n                    state = inside;\n                }\n                break;\n            case inside:\n                switch(c) {\n                    case ' ':  state = after; break;\n                    case '\\n':\n                        putchar('\\n');\n                        state = before;\n                        break;\n                    default:   putchar(c);\n                }\n                break;\n            case after:\n                if(c == '\\n') {\n                    putchar('\\n');\n                    state = before;\n                }\n        }\n    }\n    return 0;\n}\n```\n\n虽然此程序较长，至少有一个明显的好处，程序中只调用一个读取字符的getchar()函数，而且程序中只有一个循环，不像之前程序使用四个循环。\n\n此程序中while循环内的程序即为自动机的步骤，而循环本身即可重复的执行自动机的程序。\n\n此程序实现如下图所示的有限状态机，其中N表示换行字符、S表示空白、A表示其他的字符。自动机依目前状态及读取的字符不同，会执行图中一个箭头所示的动作，可能是由一个状态跳到下一个状态，也者停在原来的状态。其中有些箭头有标示星号，表示需打印读到的字符。\n\n![Automata](images/Automata_that_prints_the_first_word_of_each_line.png)\n<i>图片来自<a href=\"https://en.wikipedia.org/wiki/Main_Page\" class=\"extiw\" title=\"en:Main Page\">English Wikipedia</a> 用户 <a href=\"https://en.wikipedia.org/wiki/User:DrCroco\" class=\"extiw\" title=\"en:User:DrCroco\">DrCroco</a>，<a href=\"http://creativecommons.org/licenses/by-sa/3.0/\" title=\"Creative Commons Attribution-Share Alike 3.0\">CC BY-SA 3.0</a>，<a href=\"https://commons.wikimedia.org/w/index.php?curid=19616119\">链接</a></i>\n\n自动机编程中，不一定要为每一个状态撰写独立的进程，而且有时状态是由许多变量组成，无法针对每一个状态规划个别的进程。此想法有时有助于程序的精简，例如在上述程序中，不论是在哪一个状态，针对换行字符的处理都一様，因此程序可以先处理换行字符，其他输入字符时才依不同状态进行处理，简化后变成以下的程序：\n\n```\n#include <stdio.h>\nint main(void)\n{\n    enum states {\n        before, inside, after\n    } state;\n    int c;\n    state = before;\n    while((c = getchar()) != EOF) {\n        if(c == '\\n') {\n            putchar('\\n');\n            state = before;\n        } else\n        switch(state) {\n            case before:\n                if(c != ' ') {\n                    putchar(c);\n                    state = inside;\n                }\n                break;\n            case inside:\n                if(c == ' ') {\n                    state = after;\n                } else {\n                    putchar(c);\n                }\n                break;\n            case after:\n                break;\n        }\n    }\n    return 0;\n}\n```\n\n此例清楚的呈现自动机编程程序的基本特点：\n\n- 各自动机步骤程序的执行时间不互相重叠。\n- 前一个步骤和下一个步骤之间所交换的资料只有标示为“自动机状态”的变量（此例中为变量<code>state</code>）。\n\n#### 分析一个基本UI的运行逻辑\n\n> 如果你有其他的设计方法，那就更好了。\n\n![流程图](images/UI-LOGIC.png)\n\n如图所示。除去初始化外，一个基本UI大致可以分为三个部分——显示、输入和执行，如果把输入算作执行的一部分，那就是两个。<i>（这里分出来一个等待输入是因为Obsidian画框图不能自己连到自己。）</i>\n\n具体的技术细节我们会在下一小节继续讨论，这一小节先展示这个程序是如何运作的。\n\n首先，很容易想到，我们的UI应该以页面（Page）作为一组数据的基本单位。这个单位当中包含屏幕应该显示的内容和程序应该执行的操作，我们可以认为这些数据构成了一个完整的步骤（Step）。程序在一个页面到另一个页面之间跳转，就是从一个步骤转换到了另一个步骤。如果我们使用数组或者枚举来组织这些页面，那么现在我们就有了代表当前页面——步骤的状态——变量<code>page_index</code>。\n\n当我们进行主循环，UI主程序第一个需要的是判断它应该在屏幕上显示什么。这有两种实现方式，取决于你的数据是如何保存的：\n\n1. 函数——显而易见的方法是为每一个页面编写一个显示函数，好处在于灵活的表现形式与简单易懂的编写方法，缺点在于需要编写大量重复的繁琐代码。\n   ![imu-show](images/IMU_SHOW.jpg)\n2. 结构体——你也可以选择用复杂的结构体数组来保存数据，并通过一个/一组通用的渲染函数来将其显示在屏幕上。你可能会发现这在实现上明显地更复杂了，但是这实现了代码的复用，而且能大幅简化页面的编写工作。\n   ![imu-show](images/UI-SHOW.jpg)\n\n要注意到我们页面中大部分的内容由选项构成，这是为了最大化利用屏幕与按键。因此，我们要声明一个变量用于表示我们正在选择的选项；我们还需要在屏幕上将这个选择表示出来。\n\n接下来程序将检测按键的输入。在执行的部分，UI根据我们的输入做出（或不做出）不同的反应。为了便于我们操作，我们可以将按下按键的动作——事件细分为短按与长按，这可以通过计时来实现。\n\n值得一提的是，我们预见到两种不同的交互情景——\n\n1. 选单、调参之类的页面。这类页面的特点在于，只要我们不进行输入，画面上展示的内容就不会发生变化。我们可以允许UI程序在这里等待输入，来减少页面刷新的频率。\n2. 实时反馈数据的页面。这类页面和上面的不同，它需要页面快速的刷新以实时反馈最新的数据。这时，我们就不能允许UI长时间等待按键的输入导致屏幕的停滞。\n\n这两个冲突需要通过简单的条件判断解决。此外，当我们编写图像处理、获取GPS数据之类需要等待数据输入与处理的页面，屏幕的帧率并不是固定的，而取决于数据处理的的速度。因此在主循环中检测按键按下不太现实，我们需要通过中断来解决按键读取的问题。\n\n主循环的最后是执行部分，无论是否发生输入，程序都需要知道它们要执行什么操作。跳转到另一个页面、减小某个参数的大小、决定发出汽车、或者干脆什么也不做，直接渲染下一帧，这些都由我们决定。同样的，这里有两种实现方式：\n\n1. 函数——对。通过switch对输入进行判断，不同的按键方式导向不一样的动作。这听起来很简单，事实也是如此。\n2. 事件编号。通过不同的编号触发不同的动作。或许是个不错的尝试。\n\n这些听起来可能有些复杂，但实践起来并不困难。现在我们就着实例代码，来看看具体的实现方法。\n\n#### 定义与初始化\n\n稍微观察一下屏幕就能发现，一个字符的宽高是8\\*16。因此，为了方便编写显示代码，我们可以在文件的顶部进行下面两个宏定义：\n\n```\n#define column(x) 8*x // 列（竖排）\n#define line(x) 16*x //行（横排）\n```\n\n接下来，正如上节所述，我们需要定义一个枚举类型，为每个页面——步骤分配一个常量，作为状态的数据类型。例如：\n\n```\n// 页面枚举\ntypedef enum OGAS_PAGE {\n    OGAS_MASTER,\n    OGAS_START,\n    EXEQ,\n    OGAS_CAMREA,\n    OGAS_GYROSCOPE,\n    FLASH_SET,\n} OGAS_PAGE;\n\n...\n\nOGAS_PAGE page_now = OGAS_MASTER; // OGAS主循环需要显示的页面。\nOGAS_PAGE page_last; // 上一个加载的页面。\n```\n\n> 为什么名字不是UI而是是OGAS？这是因为写这些代码的时候正好在听《Automation From Mao's Legacy》，遂决定用这个名字致敬Общегосударственная автоматизированная система учёта и обработки информации。\n\n接下来，我们还要定义一个变量，用来表示页面中当前被选中的选项。例如：\n\n```\nint page_target = 0; // 各页面的选择目标。\n```\n\n通过上述步骤我们基本完成了UI的初始化。现在我们试着写一个漂亮的进入动画。\n\n```\n/**\n * @brief 欢迎页面。\n */\nvoid ogas_welcome() {\n    // tft180_show_rgb565_image(0, 0, (const uint16 *)gImage_EGM, 128, 160, 128, 160, 0);\n    tft180_full(RGB565_BLACK);\n    for (int i = 0; i < 128; i += 4) {\n        tft180_draw_line(i, 0, 127 - i, 159, RGB565_WHITE);\n        system_delay_ms(10);\n    }\n    for (int i = 159; i >= 0; i -= 4) {\n        tft180_draw_line(0, i, 127, 159 - i, RGB565_WHITE);\n        system_delay_ms(10);\n    }\n    for (int i = 0; i < 15; i++) {\n        int x = (i < 4) ? 112 : ((i < 10) ? 96 : 80);\n        int y = 16 * i + ((i < 4) ? 0 : ((i < 10) ? -64 : -160));\n\n        tft180_show_chinese(x, y, 16, WHO[2 * i], 1, RGB565_GRAY);\n        system_delay_ms(67);\n\n        tft180_show_chinese(x, y, 16, WHO[2 * i], 1, RGB565_BLACK);\n        system_delay_ms(67);\n    }\n    system_delay_ms(500);\n}\n```\n这些代码会在屏幕上画出一些反射状分布的线条，然后在页面右上角显示一些中文，最后消失。\n\n逐飞库中并不包含中文字库，想在屏幕上显示中文，我们需要自己提取字模。这需要用到[PCtoLCD2002](https://github.com/fishjump/PCtoLCD2002_exe)这个工具。\n\n#### 主循环\n\n现在，程序进入到主循环。\n\n```\n/**\n * \n * @brief 人机交互界面的主循环程序。              -致瞬息万变之物，及亘古不变之物-\n * \n */\nvoid OGAS(void) {\n    ogas_welcome();\n\n    while (!ogas_ready) {\n        tft180_clear();\n\n        if (page_now != page_last) {\n            page_target = 0;\n        }\n\n        page_last = page_now;\n\n        switch (page_now) {\n            case OGAS_MASTER:\n                ogas_page_master();\n                break;\n            case EXEQ:\n                ogas_page_exeq();\n                break;\n            case OGAS_CAMREA:\n                ogas_page_camera();\n                break;\n            case OGAS_GYROSCOPE:\n                ogas_page_gyroscope();\n                break;\n            case FLASH_SET:\n                ogas_page_flsah();\n                break;\n            default:\n                ogas_page_error();\n        }\n    }\n}\n```\n\n我们可以声明一个变量<code>ogas_ready</code>用于决定我们应该什么时候退出这个循环——也就是决定将要发车的时候。它的初始值应该为1。\n\n在每次循环的开始，我们先调用屏幕的clear函数清除屏幕上的所有内容，避免屏幕上原有的内容影响显示效果。\n\n接下来，我们判断上一个循环是否切换了页面，如果发生了切换，代码中就把表示当前选中选项的变量<code>ogas_target</code>归为0，这是为了避免发生不可预见的问题。\n\n最重要的部分在于中间很大的一个switch判断，它构成了状态机的核心——实现步骤判断。\n\n我们前面已经提到，每一个页面都可以认为是一个步骤。接下来我们研究，在步骤的内部，我们的UI是如何实现的。\n\n#### 显示部分\n\n首先是显示。\n\n```\n/**\n * @brief MASTER页面。\n */\nvoid ogas_page_master() {\n\t// 显示部分\n    tft180_show_string(0, 0, \"408 Lab. cWUI-V2\");\n    tft180_show_string(0, 16, \"<MAETSR>\");\n    tft180_show_string(0, 48, \"    START\");\n    tft180_show_string(0, 64, \"    ex.eq. Input\");\n    tft180_show_string(0, 80, \"    FLASH edit\");\n    tft180_show_string(0, 112, \"    (c)2023\");\n    tft180_show_string(0, 144, \"[UP/DOWN/COF/RT]\");\n    \n    tft180_show_string(0, 48 + 16 * (page_target == 3 ? page_target + 1 : page_target), \" ->\");\n\n\t// 执行部分\n    switch (ogas_get_key(1)) {\n        case K1_S:\n            page_target = (page_target == 0) ? 3 : page_target - 1;\n            break;\n        case K2_S:\n            page_target = (page_target == 3) ? 0 : page_target + 1;\n            break;\n        case K3_S:\n            switch (page_target) {\n                case 0:\n                    page_now = OGAS_START;\n                    break;\n                case 1:\n                    page_now = EXEQ;\n                    break;\n                case 2:\n                    page_now = FLASH_SET;\n                    break;\n            }\n            break;\n        case K4_S:\n            ogas_welcome();\n            break;\n        default:break;\n    }\n}\n```\n\n> 早期编写的代码未使用前面提到的那两个宏定义，显然就没那么直观了。\n\n显示部分非常直观，不需要过多解释。我们注意这当中表示选中项的方法看起来可能有些曲折，还用到了三元运算符。这是因为最下方的选项和其他选项没有连在一起。在处理一些特殊的情况时，我们可以使用这种方法来进行实现。\n\n#### 执行部分\n\n很容易注意到，这其实就是一个小状态机，不同的case就是不同的步骤，接受按键的输入作为状态。\n\n首先关心按键读取的实现。\n\n```\ntypedef enum OGAS_KEY {\n    EMPTY,\n    K1_S, K1_L,\n    K2_S, K2_L,\n    K3_S, K3_L,\n    K4_S, K4_L,\n} OGAS_KEY;\n\n/**\n * @brief 获取各按键状态。\n *\n * @param wait 是否循环等待直到按键按下\n * @return 按键状态\n */\nOGAS_KEY ogas_get_key(int wait) {\n    do {\n        if (key_get_state(KEY_1)) { return key_get_state(KEY_1) + 0; }\n        if (key_get_state(KEY_2)) { return key_get_state(KEY_2) + 2; }\n        if (key_get_state(KEY_3)) { return key_get_state(KEY_3) + 4; }\n        if (key_get_state(KEY_4)) { return key_get_state(KEY_4) + 6; }\n    } while (wait);\n    return EMPTY;\n}\n```\n\n这里调用的是逐飞库<code>zf_device_key.c</code>中定义的函数，我们后面一点再讨论。之前有同学对这段代码的实现很困惑，所以在这里简单解释一下：\n\n在C语言中，枚举类型是被当做int或者unsigned int类型来处理的。如果我们对其进行强制类型转换，你可以看到隐藏在字符背后的数值。现代编辑器通常也都能让用户直接查看。\n\n任何一个按键无非三种状态——未按下（释放）、短按和长按，也即0、1和2。当我们调用逐飞库的<code>key_get_state</code>函数，它总是给我们反馈指定按键的上述三个状态之一。如果按键被释放（为0），则不满足if判断的成立条件（非0），因而不会进入到内部的处理，继续进行下一个if的判断。假若直到退出循环，没有任何一个if判断成立，即没有任何按键被按下，函数返回<code>EMPTY</code>，即0。如果有按键被按下，就有一个if判断的条件被满足，进入其内部的处理，函数将返回按键的状态加上一个常数。想起来短按和长按分别为1和2，这个常数实际上形成一个偏移量，它对不同按键的同一状态进行偏移，使得每个按键的每种状态都有唯一对应的常量。\n\n函数主体使用do-while循环，使循环至少被执行一次。函数接受的<code>wait</code>参数允许循环循环反复执行，直到某个按键被按下才返回而退出循环；或者也可以只执行一次就退出，让UI进行下一步动作。\n\n现在让我们关注逐飞库。在调用<code>key_init</code>函数进行初始化时，函数要求我们提供一个参数作为按键扫描周期，单位为毫秒。在这个函数上方还存在一个名为<code>key_scanner</code>的函数，注释要求我们在主循环或者PIT中断中调用该函数。但考虑到按键扫描周期为定值，而每个页面的处理时间不尽相同，在PIT中断中调用成为了唯一的选择。\n\n我们顺便提一下PIT中断。不同芯片的逐飞库对其实现略有差别，<em>需要参阅例程</em>。以笔者本人使用的逐飞科技CH32V307开源库为例，其将具体的中断执行函数储存在名为isr.c的文件内。例如：\n\n```\nvoid TIM5_IRQHandler(void)\n{\n    if(TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)\n    {\n       TIM_ClearITPendingBit(TIM5, TIM_IT_Update );\n        key_scanner();\n    }\n}\n```\n\n> TC377库的中断处理函数和这个看起来很不一样，但原理是相同的。\n\n但MCU此时并不知道何时应该调用此函数。逐飞库提供了<code>zf_driver_pit</code>帮助我们进行PIT初始化。在该名字的.h文件中有如下宏定义函数：\n\n```\n#define pit_ms_init(pit_n, ms) (pit_init((pit_n), (ms) * (system_clock / 1000)))\n```\n\n其中<code>pit_n</code>是我们需要使用的PIT通道，<code>ms</code>则是PIT周期。我们通过调用此函数，就能完成PIT中断的初始化，而无需像学习89C51那样关心对MCU各寄存器的配置，这正是上文所述的逐飞库的优点。\n\n这样，我们就实现了对按键输入的读取。\n\n将按键的输入视作状态，并根据不同的状态执行不同的步骤我们应该已经熟悉了。这里我们讨论一个特别的动作。\n\n### FLASH\n\n> 本节还没有完成，但已经超过理应发布时间一星期了......\n\n我们现在已经知道，我们程序运行时定义的变量储存在内存中，断电即丢失。这就存在一个很不方便的情况——假若我们临时修改了某个参数，但条件又不允许我们频繁烧录，我们就不得不在每一次上电后再手动对其进行更改。如果我们要管理一大组参数，这种维护工作就变得艰难直至不可行了。\n\n为解决这一矛盾，我们使用FLASH在掉电时储存数据。FLASH的特点在于需要整页存取，因此读取和写入的时间比较长。使用方法逐飞库中已经提供详细的例程，这里不进行赘述。我们关注如何在用户页面中编辑和储存FLASH数据。\n\n## 任务目标\n\n各组基于逐飞TC377库，参考Example/E05_pit_demo、Example/E08_eeprom_demo、tc377_main_board_demo/E06_01_oled_display_demo实现一个用户页面。代码应该易于维护和扩展，并至少包含下面的页面层次：\n\n```\n.主页\n├── 发车\n├── 数据查看\n|   ├── GPS\n|   ├── MPU6050\n|   ├── CAMERA\n|   ├── ENCODER\n|   ├── MOTO_PID\n|   └── WIFI\n└── FLASH\n```\n\n数据查看中各个三级页面可以先留空，但应该实现退出页面的功能。FLASH页面中需要实现编辑和储存的功能，至少可以编辑5个示例变量。选中“发车”时结束用户页面。\n\n将所有源代码上传到仓库中。并在2024年5月19日（星期日）20:40之前将仓库首页的链接发送给我。\n\n## 参考资料\n\n1. [有限状态机 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA)\n2. [状态机编程 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E8%87%AA%E5%8A%A8%E6%9C%BA%E7%BC%96%E7%A8%8B)\n","tags":["SIC实验室学习目标"],"categories":["SIC实验室"]},{"title":"SIC实验室23届第九次学习目标","url":"/sic实验室23届第九次学习目标/","content":"\n![SIC-LOGO](images/SIC.png)\n\n**<center>- 立足培养、重在参与、鼓励探索、追求卓越 -</center>**\n\n## 前言\n\n51单片机的学习到中断系统与定时器就先告一段落，后面的内容我们较少应用，就不再安排学习任务，感兴趣的同学随时可以使用实验室内开发板自行学习。\n\n本文档内容较长、图片较多，同学们可以访问[karubon.moe（慢到可能无法访问）](https://karubon.moe/sic实验室23届第九次学习目标/)或[其镜像站（速度相对快，但还是很慢）](https://karubon.pages.dev/sic实验室23届第九次学习目标/)获得良好的阅读体验。\n\n全国大学生智能汽车竞赛是本实验室的核心项目，我们过去一个多学期以来所学习的C语言、51单片机让我们获得了参与竞赛的软件基础知识。现在，我们开始了解关于组队参加全国大学生智能汽车竞赛，你还需要具备的前置知识。\n\n## 学习内容\n\n> 由于编辑匆忙，本文档必然存在不足之处。遇到表述不清的地方还请活用搜索引擎或者发钉钉询问我。感激不尽。\n\n### 团队协作工具\n\n我们已经知道，这个竞赛并不是可以一人完成的竞赛<del>（或者说如果有这样的实力，我们就不会出现在这里）</del>，因此，一个类型的赛题，我们会组成一只小组——通常是两名软件手与一名硬件手协作完成。这就要求我们的软件手们必须掌握协作的能力和<em>工具</em>。\n\n> 什么，你是两硬一软的独狼软件手？即使如此，学习使用下面的工具依然是极有益的。具体原因会在下面提及。\n\n能力需要慢慢磨合，所以先来掌握工具吧。\n\n#### Git——版本控制系统\n\nGit是一种可以智能追踪文件中的更改的版本控制系统（VCS）。在你和组员同时对同一文件进行更改时，Git的价值就体现出来了。\n\n版本控制系统跟踪我们在项目上进行协作时的更改历史记录。当我们对项目进行更改时，可以随时恢复项目的任何早期版本。\n\n我们可以查看项目历史记录以找出：\n\n- 进行了哪些更改？\n- 由谁进行了更改？\n- 何时进行了更改？\n- 为什么需要更改？\n\nVCS为每个贡献者提供统一且一致的项目视图，显示已经在进行中的工作。查看透明的更改历史记录、谁进行了更改，以及它们如何为项目开发做出贡献，可帮助团队成员在独立工作时保持一致。\n\n在分布式版本控制系统中，每个开发人员都有项目和项目历史记录的完整副本。与曾经流行的集中式版本控制系统不同，分布式版本控制系统（DVCS）不需要与中央存储库的持续连接。Git是世界上最流行的分布式版本控制系统。\n\nGit允许我们在一个地方查看任何项目的更改、决策和进度的整个时间线。从我们访问项目历史记录的那一刻起，就拥有了理解它并开始参与所需的所有上下文。\n\n我们在每一个地方上传和下载代码。使用像Git这样的DVCS，工作可以随时随地进行。\n\nGit项目包含与项目关联的文件和文件夹的整个集合，以及每个文件的修订历史记录。文件历史记录在时间上显示为快照，称为提交。提交可以组织成多个开发行，称为分支。\n\n由于Git是DVCS，因此存储库是独立的单元，任何拥有存储库副本的人都可以访问整个代码库及其历史记录。\n\n使用命令行或其他易用性接口，Git存储库还允许：与历史记录交互、克隆存储库、创建分支、提交、合并、比较不同版本的代码更改等。\n\n受限于篇幅，本文不介绍Git的光荣历史或者它的底层原理，感兴趣的同学可以访问Git官方的[文档](https://git-scm.com/book/zh/v2)了解更多。\n\n<hr>\n\n现在我们安装它。\n\n访问[Git官网](https://git-scm.com/)，点击页面中间偏左下的Downloads，然后点击Downloads for Windows下载，按默认选项安装即可。\n\n安装Git之后，要做的第一件事就是设置你的用户名和邮件地址。这一点很重要，因为每一个Git提交都会用到这些信息，它们会写入到你的每次提交中，你无法再更改这些提交中的信息。\n\n在桌面（或者其他文件夹）**右键菜单中（可能需要“显示更多选项”）选择Git bash here**，输入并执行下面命令（美元符号不用输入）：\n\n```\n$ git config --global user.name \"YourName\"\n$ git config --global user.email \"YourEmail@example.com\"\n```\n\n<mark>记得把<code>YourName</code>和<code>YourEmail@example.com</code>改成你实际使用的（）。</mark>\n\n![在桌面右键菜单中选择git bash here](images/1.jpg)\n\n<code>--global</code>参数将使更改是全局性的，之后你在这个系统上的操作都会默认使用此信息。\n\n#### Gitee或者GitHub——代码托管平台\n\n[Gitee（码云）](https://gitee.com/)是开源中国于2013年推出的基于Git的代码托管服务，目前已经成为国内知名的代码托管平台，提供中华人民共和国本土化的代码托管服务。\n\n[GitHub](https://github.com/)是一种基于云的平台，可在其中存储、共享并与他人一起编写代码。\n\n通过将代码存储在GitHub上的“存储库”中，你将可以：\n\n- “展示或共享”你的工作。\n- 持续“跟踪和管理”对代码的更改。\n- 让其他人“审查”你的代码，并提出改进建议。\n- 在共享的项目中开展“协作”，无需担心这些更改会在准备好集成更改之前影响协作者的工作。\n- 协作式工作是GitHub最基本的功能之一，该功能由开源软件Git实现，而GitHub是以该软件为基础进行构建的。\n\n其实我会更喜欢GitHub，文档清晰齐全，比Gitee使用方便很多。但由于<abbr title=\"GitHub遭国家数据跨境安全网关阻断\">众所周知的原因</abbr>，这里我们采用Gitee作示范。\n\n> 克服众所周知的原因事实上并不困难，使用GitHub是可行的，你看到的这个网站正是托管在GitHub Pages上。\n>\n> <br>\n> \n> 但真正的问题是什么呢？<span class=\"heti-em\">你和你的组员通常需要使用同一仓库完成协作</span>。而且由于Gitee和GitHub储存库的默认分支不同，在两边仓库同时上传的时候可能会有点小麻烦,虽然这是可以解决的。\n\n##### 注册Gitee账号\n\n进入Gitee网站，从首页右上角点击“注册”或点击“加入Gitee”即可注册个人账号。\n\n在Gitee的注册界面依次填入各项，注意邮箱应该和你在Git中填写的完全一致。\n\n##### 创建第一个仓库\n\n在注册完成并成功登录Gitee账号后，我们可以开始创建自己的第一个仓库。\n\n1. 通过网站右上角的「+」号，选择“新建仓库”，进入新建仓库页面。\n   ![创建一个仓库](images/14.png)\n2. 在新建仓库页面填写仓库信息。仓库相关概念说明如下：\n    - **仓库名称**：仓库的名称，用于仓库命名。\n    - **归属**：仓库归属账户，创建成功后该账户默认为仓库的拥有者（管理员）。\n    - **路径**：仓库的git访问路径，由用户个性地址+仓库路径名称组成。创建仓库后用户将通过该路径访问仓库。\n    - **仓库介绍**：仓库的简单介绍。\n    - **是否开源**：设置仓库是否为公开仓库，公开仓库对所有人可见，私有仓库仅限仓库成员可见。\n    - **选择语言**：仓库主要开发用的编程语言。\n    - **添加.gitignore**：系统默认提供的git忽略提交的文件模板，设置.gitignore后将默认忽略指定目录/文件到仓库。\n    - **添加开源许可证**：如果仓库为公开仓库，可以添加设置仓库的开源协议，作为对当前项目仓库和衍生项目仓库许可约束，开源许可证决定他人可以如何使用你的这个开源项目。\n    - **Readme**：项目仓库自述文档，通常包含有软件的描述或使用的注意事项。\n    - **使用模板文件初始化仓库**：使用Issue或Pull Request文件模板初始化仓库。\n3. 点击“创建”，即可在Gitee上创建你的第一个仓库。\n\n现在，你应该可以看到下面的页面。\n\n![空仓库快速设置页面](images/15.png)\n\n##### 提交第一行代码\n\n在创建完仓库之后，我们通过如下方式，向仓库提交第一行代码。\n\n1. 方法一、先将仓库clone到本地，修改后再push到仓库\n\n此处我们以用户账号下命名为Hello-Gitee的仓库为例。对应的仓库地址为：https://gitee.com/ChaoiteC/hello-gitee.git ，在实际实践中，你应该替换为自己仓库的地址。\n\n在硬盘中你想存放代码文件的位置的右键菜单中（可能需要“显示更多选项”）选择git bash here，输入并执行下面命令：\n\n```\n$ git clone https://gitee.com/用户个性地址/hello-gitee.git #将远程仓库克隆到本地\n```\n\n在克隆过程中，如果仓库是一个私有仓库，将会要求我们输入Gitee的账号和密码。按照提示输入即可。\n\n如果你没有初始化仓库，Git会提示<code>warning: You appear to have cloned an empty repository.</code>，但这并不影响我们在当前目录下clone了我们的仓库。\n\n打开文件夹，如果你在文件资源管理器中开启了显示隐藏文件和文件夹，这时候你会发现目录下出现了一个<code>.git</code>文件夹，这个文件夹下储存了Git工作所需的文件。\n\n现在我们以新建README文件为例，演示如何将我们新建、修改或删除的代码推送到仓库。\n\n在目录下新建一个名为<code>README.md</code>的文件，通过任意的文本编辑器在文件内输入下面内容：\n\n```\n### 介绍\n\n你好，Gitee！\n\n```\n\n保存后，相对于原本的空仓库，我们的本地储存库就发生了**变动**。\n\n现在在仓库根目录下逐行执行下面命令：\n\n```\n$ git add . #将当前目录所有文件添加到git暂存区\n$ git commit -m \"my first commit\" #提交并备注提交信息\n$ git push origin master #将本地提交推送到远程仓库\n```\n\n像这样——\n\n![推送到远端](images/16.png)\n\n现在，在浏览器上刷新你的仓库页面，你应该能看到你刚刚做出的改动。\n\n![推送后的仓库](images/17.png)\n\n> **什么是README？**\n>\n> 自述文件（英文：Readme），是随着软件发布的一种帮助文档，里面通常包含有软件的描述或使用的注意事项。这种文件通常是纯文本文件，也有RTF、DOC或Markdown格式的自述文件。文件名通常是以大写英文字母组成，这是因为大写字母比小写字母有着较小的ASCII码，因此在一些以ASCII顺序来排序文件名称的操作系统里，它会被列在文件列表的第一个。即使这些人没有关于自述文件的知识，这种文件的特殊命名方式也能够使任何人迅速发现。\n> <br>\n> 当你的仓库里存在一个README文件的时候，Gitee和GitHub会在仓库的首页显示这一文件的内容，方便使用者快速阅读它。认真编写README文件是一个优秀开发者应该养成的习惯。\n\n2. 方法二、本地初始化一个仓库，设置远程仓库地址后再做push\n\n和方法一的差别，在于先创建仓库。\n\n```\n$ git init \n$ git remote add origin https://gitee.com/用户个性地址/hello-gitee.git\n```\n\n这样就完成了版本的一次初始化。\n\n接下来，进入你已经初始化好的或者克隆仓库的目录,然后执行：\n\n```\n$ git pull origin master\n```\n\n这个命令会使Git将代码从远端拉取到本地。\n\n修改代码之后：\n\n```\n$ git add .\n$ git commit -m \"第一次提交\"\n$ git push origin master\n```\n\n如果需要账号密码的话就输入账号密码，这样就完成了一次提交。此时，你可以在你的个人面板、仓库主页查看到你的提交记录。\n\n在新建仓库时，如果在Gitee平台仓库上已经存在readme或其他文件，在提交时可能会存在冲突，这时我们要选择是保留线上的文件或者舍弃线上的文件，如果要舍弃线上的文件，则在推送时进行强制推送<code>-f</code>（除非你知道自己在做什么，否则强烈不建议这么做）：\n\n```\n$ git push origin master -f\n```\n\n如果想保留线上的文件,则先执行：\n\n```\n$ git pull origin master\n```\n\n#### 通过VS Code的图形化页面使用Git\n\n如果你不擅长命令行的操作方式，不妨安装VS Code吧！（你可以参考VSCode的[官方文档](https://code.visualstudio.com/docs/setup/windows)进行安装。）\n\nVisual Studio Code集成了源代码控制管理（SCM），开箱即支持Git。VS Code Marketplace上的扩展提供了许多其他源码控制提供商。\n\n> 在开始使用前，确保已安装 Git。VS Code将使用计算机上已安装的Git（至少版本 2.0.0），因此在使用这些功能之前，需要先安装Git。\n\n![左侧活动栏](images/19.png)\n\n在左侧的活动栏中，源代码控制图标始终显示当前存储库中**有多少更改**。选择该图标将显示当前存储库更改的详细信息：**变更、已暂存变更和合并变更**。\n\n点击每个项目将详细显示**每个文件中的文本更改**。请注意，对于未暂存的更改，右侧的编辑器仍然可以让您编辑文件：请随意使用它！\n\n您还可以在 VS Code 的左下角找到**存储库状态的指示器：当前分支、变更指示器**以及当前分支的**传入和传出提交**数量。您可以通过点击该状态指示器并从列表中选择Git引用来**签出存储库中的任何分支**。\n\n<hr>\n\n现在我们来演示如何通过VS Code初始化仓库、拉取和推送代码。\n\n##### 初始化仓库和拉取代码\n\n打开一个文件夹，在侧边栏中选择源代码管理。如果文件夹没有初始化Git，VSC会提示<code>当前打开的文件夹中没有Git存储库</code>。\n\n![没有Git存储库](images/18.png)\n\n这时我们选择「初始化仓库」，VS Code将自动执行相关的Git指令，完成仓库初始化。\n\n接下来点击“源代码管理”栏右侧的“更多操作键”>远程>添加远程存储库，将仓库URL<code>https://gitee.com/用户个性地址/hello-gitee.git</code>输入到屏幕正上方的输入框中，按下回车，接着提供存储库名称（这里是<code>hello-gitee</code>），将远程存储库添加到Git中。\n\n![添加远程存储库](images/20.png)\n\n有趣的——在**现代**，大多数软件或平台的默认分支已经是<code>main</code>，但Gitee的默认分支仍是<code>master</code>。这导致VS Code在从尝试远端拉取时会发生警告：<code>[warning] No such branch: main.</code>\n\n现在，我们不得不多执行一步，将工作区的分支切换回<code>master</code>。\n\n> 你也可以选择把主分支改为<code>main</code>，但这会比较麻烦。\n\n点击“源代码管理”栏右侧的“更多操作键”>签出到...，在屏幕正上方处选择<code>有云朵标志的hello-gitee/master ********处的远程分支【远程分支】</code>一栏。\n\n![选择要签出的分支或标记](images/21.png)\n\n这一操作等价于命令行中的:\n\n```\n$ git checkout --track hello-gitee/master\n```\n\n现在可以点击“源代码管理”栏右侧的“更多操作键”>拉取 来从远程存储库中拉取（pull）代码到本地。\n\n##### 推送代码\n\n在我们修改了代码之后，需要将其推送（push）到远程储存库，使他人可以查看和下载。\n\n一旦你开始修改代码，VS Code将开始向装订线指示器（左）和概览标尺添加注释以提示你做了哪些修改。\n\n![装订线指示器](https://code.visualstudio.com/assets/docs/sourcecontrol/overview/gutter.png)\n\n- 红色三角形表示已删除的行。\n- 绿色条表示新增的行。\n- 蓝色条表示修改过的行。\n\n当我们完成了修改<mark>（记得进行保存）</mark>，在侧边栏打开“源代码管理”页面，审视我们即将提交的代码。\n\n点击左侧边栏中任何提示已经更改的文件，将会在主视图中打开差异比较器。\n\n![差异查看器](images/19.png)\n\n一旦发生合并冲突，VS Code就会识别并突出显示，并有内联操作来接受一项或两项更改。\n\n> 合并冲突指的是在Git中，当尝试将两个或多个不同的分支合并时，Git无法自动决定如何合并它们的改动时所发生的情况。\n\n![合并冲突](https://code.visualstudio.com/assets/docs/sourcecontrol/overview/merge-conflict.png)\n\n为了帮助解决合并冲突，VS Code提供**三路合并编辑器**，可以在其中交互式地接受传入和当前的更改，并查看和编辑合并后的结果文件。单击带有 Git 合并冲突的文件右下角的“在合并编辑器中解决”按钮，即可打开三路合并编辑器。\n\n三路合并编辑器显示传入更改（左）、当前更改（右）以及合并结果（底）的独立视图。冲突会被突出显示，并且可以使用 CodeLens 按钮来解决。\n\n![三路合并编辑器](https://code.visualstudio.com/assets/docs/sourcecontrol/overview/merge-editor-overview.png)\n\n三路合并编辑器允许通过接受其中一个或两个变更来解决冲突。也可以手动编辑合并的结果。\n\n对于某些冲突，合并编辑器会显示一个“接受组合”按钮。接受组合会智能地合并两个变更，从而解决当前的冲突。这对于位于同一行但未涉及相同字符的更改特别有用。\n\n使用“忽略”按钮来既不接受传入更改也不接受当前更改，但标记冲突已解决。这会将冲突区域重置为未进行任何更改之前的状态。\n\n可以使用结果编辑器右侧的冲突计数器来跟踪未解决的冲突数量。单击计数器会跳转到下一个未解决的冲突。一旦所有冲突解决完毕，您可以通过在右下角选择“完成合并”来完成合并。这会将文件暂存，并关闭合并编辑器。\n\n<hr>\n\n当我们解决了合并冲突，就可以正常进行提交。\n\n点击“源代码管理”栏中的“提交”按键，将会在主视图中打开<code>COMMIT_EDITMSG</code>（提交消息）的编辑页面。\n\n![COMMIT_EDITMSG](images/22.png)\n\n提交消息对于记录代码更改的历史非常重要，因为它们帮助其他开发者理解提交所做的修改。<span class=\"heti-em\">一个优秀的提交消息应该简洁明了地描述你所做的更改</span>，并提供足够的信息，使其他人能够理解为什么这些更改是必要的。\n\n输入提交消息之后，点击右上角的“✓”按钮（接受提交消息），VS Code和Git就会做好提交的准备。点击“源代码管理”栏中的“同步更改”按键，将更改推送（push）到远程存储库，你的组员就可以在他的设备上同步更改，只需要点击“源代码管理”栏右侧的“更多操作键”>拉取 来从远程存储库中拉取（pull）代码到本地。\n\n### 逐飞科技开源库\n\n**成都逐飞科技有限公司**长期以来是全国大学生智能汽车竞赛的协办单位，为竞赛提供大量的软硬件服务。逐飞科技为竞赛开发的开源库以简洁易懂、容易上手著称。\n\n在之后的日子里，我们会通过实验室内搭载英飞凌TC377芯片的逐飞学习板来继续学习关于竞赛的软件知识。\n\n![英飞凌TC377芯片的逐飞学习板](images/ZF-PCB.jpg)\n\n#### 下载开源库\n\n访问[逐飞TC377开源库的仓库首页](https://gitee.com/seekfree/TC377_Library)。点击文件目录右上角的“克隆/下载”按钮。然后选择下载ZIP。\n\n![克隆/下载](/images/23.jpg)\n\n> 注意到页面上提供了克隆的方法吧？感兴趣可以试试。\n\n#### 安装开发环境\n\nAURIX™ Development Studio（简称ADS）是基于TriCore™的AURIX™微控制器系列的免费集成开发环境（IDE）。它是一个全面的开发环境，包括Eclipse IDE、C编译器、多核调试器、Infineon低级驱动（iLLD），没有时间和代码大小限制，可以进行应用代码的编辑、编译和调试。\n\n结合众多的代码示例项目，该IDE可用于评估AURIX™微控制器系列的强大架构。\n\n它支持将Microsoft Windows 10作为主机操作系统（OS）。\n\n<hr>\n\n以上是官方介绍，但不得不说，AURIX™ Development Studio真的是很难用。ADS的下载方式写在开源库的README文档里面，请自行翻阅。\n\n<em>使用前<mark>务必</mark>仔细阅读逐飞科技AURIX Development Studio使用说明书--逐飞科技 V1.6 PDF文档。</em>\n\n安装和使用时的常见问题：\n- 工作空间/路径（workplace）不能含有中文。\n- 工程文件夹需复制到工作空间。\n- 导入的工程需要设为ACTIVE状态，若是ACTIVE-DEBUG则可以正常编译，若是ACTIVE-DEFAULT不能编译会报错找不到路径。\n- 有时候导入空的开源库不行，尝试导入例程就正常，很玄学。\n- 添加文件可以直接拖拽，也可以在工程文件夹添加，添加后需要refresh。\n- 编译成功不代表能正常烧录，需安装DAS驱动，且正常显示为tricore...才可以。\n\n#### 开源库结构简介\n\n> 感觉这一小节写得很烂？是的，我也这样认为。\n\n```\n./Seekfree_TC377_Opensource_Library\n├── .setting 开发环境的各项设置。\n├── code 存放我们自行编写的代码的文件夹。\n├── libraries 开源库的主要代码文件夹。\n|   ├── doc 存放许可证和版本说明。\n|   ├── infineon_libraries 英飞凌程序库。\n|   ├── zf_common 逐飞库的通用部分。\n|   ├── zf_components “逐飞助手”软件的相关代码。\n|   ├── zf_device 各外置设备的驱动代码。\n|   └── zf_driver 开源库的基本驱动代码。\n├── user 储存main函数和中断设置的文件夹。\n|   ├── cpu0_main.c CPU0的程序进入点。\n|   ├── cpu0_main.h \n|   ├── cpu1_main.c CPU1的程序进入点。\n|   ├── cpu2_main.c CPU2的程序进入点。\n|   ├── isr.c 中断的相关处理函数。\n|   ├── isr.h \n|   └── isr_config.h 中断的相关设置。\n├── .cproject \n├── .project\n├── Lcf_Tasking_Tricore_Tc.lsl\n├── 删除临时文件.bat 执行这个批处理文件会删除所有的中间文件，可以避免在没有.gitignore文件的情况下将许多没必要的文件上传到远程储存库。\n├── 尽量不要使用的引脚.txt 顾名思义。\n└── 推荐IO分配.txt 顾名思义。\n```\n\n逐飞其他芯片的开源库结构大同小异。\n\n通常来说，想要了解一个程序，我们应该从程序的进入点<code>cpu0_main.c</code>开始。\n\n### GPIO\n\nGPIO（General-purpose input/output），通用型之输入输出的简称，功能类似8051的P0-P3，其接脚可以供使用者由程控自由使用，PIN脚依现实考量可作为通用输入（GPI）或通用输出（GPO）或通用输入与输出（GPIO）。\n\n## 学习任务\n\n各<span class=\"heti-em\">组</span>在Gitee或GitHub上创建一个<em>公开</em>仓库，将组员以开发者或更高权限加入。\n\n参考Example/E01_gpio_demo，编写代码，使核心板上4颗LED依次闪烁，并能通过按键或拨码开关改变流水方向。\n\n尝试烧录到学习板中运行。将所有源代码上传到仓库中。并在2024年4月14日（星期日）20:40之前将仓库首页的链接发送给我。\n\n## 参考资料\n\n> [GitHub官方文档（https://docs.github.com/zh/get-started）](https://docs.github.com/zh/get-started)\n> [Gitee帮助中心（https://gitee.com/help）](https://gitee.com/help)\n> [Pro Git（https://git-scm.com/book/zh/v2）](https://git-scm.com/book/zh/v2)\n> [VS Code官方文档（https://code.visualstudio.com/docs/sourcecontrol/overview）](https://code.visualstudio.com/docs/sourcecontrol/overview)\n","tags":["SIC实验室学习目标"],"categories":["SIC实验室"]},{"title":"SIC实验室23届第八次学习目标","url":"/sic实验室23届第八次学习目标/","content":"\n![SIC-LOGO](https://raw.githubusercontent.com/ChaoiteC/ChaoiteC.github.io/main/images/SIC.png)\n\n### 前言\n\n很高兴还能与各位在新学期再次见面！\n\n考虑到：\n\n- PDF文档需要专门的编辑软件，过于复杂。Markdown格式相对于PDF格式更容易编辑和维护。\n- Markdown是一种纯文本格式，几乎所有操作系统和平台都支持。这意味着我们可以轻松地查看和编辑Markdown文档，而不依赖特定的软件或平台。\n- PDF文档则需要进行专门的排版编辑，而Markdown格式更注重内容而非样式，这使得文档更加专注于内容本身，而不会受到样式的限制。\n- Markdown是一种开放标准，拥有庞大的生态系统和社区支持。\n- 在PDF文档上复制代码存在困难。\n\n从本次学习目标开始，我们不再使用pdf格式进行发布，而改为使用md格式或txt格式。盼望各位同学理解。\n\n### 学习内容\n\n上学期的最后，我们学习了矩阵键盘与LCD1602，现在我们继续学习关于51单片机的后续内容。\n\n#### 中断系统\n\n在单片机应用系统中，中断技术主要用于实时监测与控制，也就是要求单片机能及时地响应中断请求源提出的服务请求，进行快速响应并及时处理，因此，我们必须了解单片机的中断技术。\n\n单片机的中断是由单片机片内的中断系统来实现的，当中断请求源（简称中断源）发出中断请求时，如果中断请求被允许的话，单片机暂时中止当前正在执行的主程序，转到中断服务程序处理中断服务请求，处理完中断服务请求后，再回到原来被中止的程序之处（断点），继续执行被中断的主程序。\n\n如果单片机没有中断系统，单片机的大量时间可能会浪费在查询是否有服务请求的定时查询操作上，即不论是否有服务请求，都必须去查询，单片机采用中断技术后，则完全消除了查询方式中的等待现象，这大大地提高了单片机的实时性和工作效率。由于中断工作方式的优点极为明显，因此，单片机的片内都集成有中断系统硬件模块。\n\n我们应该**了解**与中断系统有关的特殊功能寄存器，如何来对中断系统进行初始化编程，中断响应的条件，如何撤销中断请求，**掌握**如何进行中断系统应用的编程。\n\n#### 定时器/计数器\n\n在工业检测、控制中，也包括本实验室参与的竞赛中，许多场合都要用到计数或定时功能。例如，镜头组每秒要获取20~50幅赛道图像进行处理、越野组必须以固定频率对车辆进行姿态解算等。\n\n我们应该**了解**51单片机片内定时器/计数器的结构、功能、工作原理、有关的特殊功能寄存器、工作模式和工作方式的选择、**掌握**定时器/计数器的C51编程以及应用案例。\n\n<br>\n\n<del>简单来说，这些东西会用即可。</del>\n\n### 任务目标\n\n通过实验室内51单片机开发板或Proteus仿真制作一个秒表，用七段数码管或者LCD1602显示计时时间，最小计时单位为“百毫秒”，计时范围为0.1~9.9s。当第1次按下并松开计时功能键时，秒表开始计时并显示时间；第2次按下并松开计时功能键时，停止计时；第3次按下计时功能键，秒表清零，再按1次计时功能键，重新开始计时。如果计时到9.9s时，将停止计时，按下计时功能键，秒表清零，再按下重新开始计时。\n\n你应该在<mark>2024年3月24日20:40前</mark>将你的完整源代码发送给我。\n\n### 额外的挑战\n\n下面是一个有趣的问题（大概），如果感兴趣的话可以试试看。\n\n大整数是指位数超过常规整数类型（如int或long）表示范围的整数，例如：123456789012345678901234567890。在计算机科学中，常规整数类型的位数通常是固定的，因此无法表示超出其范围的整数。\n\n大整数通常是通过字符串或数组来表示的，其中每个元素代表整数的一位数字。由于大整数可以具有任意位数，因此可以存储比常规整数类型更大的数字。在执行大整数运算时，需要采用特殊的算法来处理超出常规整数范围的数值。\n\n试用C语言实现一算法，接受两个大整数字符串的输入，并按从左到右的阅读顺序将其相加，<span class=\"heti-em\">不能先将两个整数倒转后再做加法</span>，然后输出计算的结果。\n\n```\n例如：\n\n输入：\"147258369789456123\"、\"987654321963852741\"\n输出：\"1134912691753308864\"\n```\n\n代码的框架已经在下面给出，你只需要补全add函数中的代码。\n\n```\n#include <stdio.h>\n#include <string.h>\n\n#define MAX_DIGITS 1000\n\n// 函数声明\nvoid add(char num1[], char num2[], char result[]);\n\nint main() {\n    char num1[MAX_DIGITS], num2[MAX_DIGITS], result[MAX_DIGITS + 1];\n\n    printf(\"输入第一个大整数：\");\n    scanf(\"%s\", num1);\n\n    printf(\"输入第二个大整数：\");\n    scanf(\"%s\", num2);\n\n    // 调用函数进行大整数加法\n    add(num1, num2, result);\n\n    printf(\"两个大整数的和为：%s\\n\", result);\n\n    return 0;\n}\n\n// 大整数加法函数\nvoid add(char num1[], char num2[], char result[]) {\n\n    // 在这里补全代码\n\n    // 注意结果数组以空字符结尾\n}\n```\n\n<hr>\n\n> *立足培养、重在参与、鼓励探索、追求卓越*\n","tags":["SIC实验室学习目标"],"categories":["SIC实验室"]},{"title":"帆塔诗雅的一角","url":"/帆塔诗雅的一角/","content":"\n根据萌国ICP备案要求，本站不提供相关内容。烦请移步[Pixiv](https://www.pixiv.net/novel/show.php?id=21666206)查看。\n","tags":["R-18"],"categories":["创作"]},{"title":"基于Hexo在GitHub Pages上构建静态博客的方法","url":"/基于hexo在github-pages上构建静态博客的方法/","content":"\n或许说这是本站从无到有搭建的记录更为准确。\n\n<!-- more -->\n---\n\n## 前言\n\n在寒假的中期，百般聊赖之下，终于是打算拥有一个自己的博客网站。恰好在校中简略学习了网站制作的知识，使我得到了足够的勇气去面对挑战，于是便有了你眼前的这个网站与这篇文章。当然，本文力求使非信息技术相关专业的读者也能轻易上手，因此不需要抱有过多的恐惧。只要你强烈地希望拥有一个自己的博客网站，并且愿意付诸行动，那么我相信这篇文章一定能帮助到你。\n\n*本文所有操作均在Windows 11系统下进行。*\n\n## 安装Hexo\n\n[Hexo](https://hexo.io/)是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\nHexo的特点在于：\n- 支持Markdown：Hexo兼容GitHub Flavored Markdown的各项功能，并可与大部分Octopress插件相容。\n- 一键部署：使用简单的指令即可将博客部署至GitHub Pages、Heroku或其他平台。\n- 插件与可扩展性：其强大的API使得用户可以灵活扩展功能，同时轻松集成多种模板引擎（如EJS，Pug，Nunjucks）和工具（例如Babel，PostCSS，Less/Sass）。\n\n### 安装前提\n\n在安装Hexo之前，我们必须要安装下面两个软件。\n\n[Node.js](https://nodejs.org/)是能够在服务器端运行 JavaScript 的开放源代码、跨平台执行环境。<q>Node.js版本需不低于10.13，建议使用Node.js 12.0及以上版本</q>，但我不认为大部分用户会去下载这些低版本的软件。\n\n[Git](https://git-scm.com/)是一个自由开源的分布式版本控制系统，设计用于快速高效地处理从小型到超大型的所有项目。\n\n### 编辑器 VS Code（<span class=\"heti-em\">可选</span>）\n\n[Visual Studio Code](https://code.visualstudio.com/)（简称 VS Code）是一款由微软开发且跨平台的免费源代码编辑器。该软件以扩展的方式支持语法高亮、代码自动补全（又称 IntelliSense）、代码重构功能，并且内置了命令行工具和 Git 版本控制系统。用户可以更改主题和键盘快捷方式实现个性化设置，也可以通过内置的扩展程序商店安装其他扩展以拓展软件功能。\n\n这个软件不是必需的，它只是便于你编辑代码、使用Markdown语法，同时简化一些Git相关的操作。但你也可以有自己的想法。\n\n### 博客框架 Hexo\n\n在上述两个必要软件安装完成之后，通过在桌面（或者其他文件夹）右键菜单中选择git bash here，输入并执行下面命令来安装Hexo（不要输入美元符号）：\n\n```\n$ npm install -g hexo-cli\n```\n![在桌面右键菜单中选择git bash here](images/1.jpg)\n\n完成这个操作之后，我们的设备上已经安装了Hexo。\n\n## 本地构建\n\n现在我们已经拥有了Hexo，是时候构建网站了。在将网站真正上网之前，我们通常先在自己的电脑上确定显示效果，避免频繁上传的麻烦，也保证网站的稳定。\n\n### 初始化\n\n在自己的本地磁盘上创建一个文件夹，你可以命名为blog，或者任意名字。这个文件夹用于储存构建博客网站的所有文件。\n\n在此文件夹内打开右键菜单，选择git bash here，输入并执行下面命令以初始化该文件夹：\n```\n$ hexo init\n```\n\n![初始化该文件夹](images/2.jpg)\n\n执行该命令后，Hexo会从GitHub克隆一份基本的网站文件与一份主题，同时使用包管理器下载依赖。完成后，你应该收到一条告知完成的消息：\n```\nINFO  Start blogging with Hexo!\n```\n![告知完成的消息](images/3.jpg)\n\n此时在你文件夹中至少有以下文件与文件夹：\n```\n.\n├── _config.yml  网站的配置信息。可以在此配置大部分的参数。\n├── .gitignore   用于Git版本控制时忽略指定文件或目录。\n├── package.json 应用程序的信息。EJS,Stylus和Markdown渲染引擎已默认安装。\n├── .github      GitHub特定的配置文件夹。\n├── node_modules Node.js依赖模块存放目录。你通常不用关心这个。\n├── scaffolds    模版文件夹。新建文章时Hexo会根据scaffold来创建文件。\n├── source       资源文件夹是存放用户资源的地方。除_posts之外，开头命名为_(下划线)的文件/文件夹和隐藏的文件均会被忽略。\n|   └── _posts   存放博客文章的文件夹。\n└── themes       主题文件夹。Hexo会根据主题来生成静态页面。\n```\n\n### 生成与预览\n\n通过下面命令生成静态文件：\n```\n$ hexo generate \n或者简写为：\n$ hexo g\n```\n此时根目录下生成public文件夹，里面存放着生成的站点文件。\n\n现在通过下面命令启动本地服务器：\n```\n$ hexo server\n或者简写为：\n$ hexo s\n```\n\n这个命令默认会在 http://localhost:4000/ 启动你的网站。通过在终端中按住ctrl并用左键点击链接可以快速在浏览器中打开。你应该会看到下面的页面：\n![最小博客](images/4.jpg)\n\n至此你已经在本地上构建了第一个你的网站并完成预览，在终端中同时按住ctrl+C终止服务器。下面有一些优化体验的可选操作。\n\n### 安装第三方主题（<span class=\"heti-em\">可选</span>）\n\n> **注意**<br><br>\n> \n> 许多插件和主题都是由社区贡献的。本站不保证其可用性和安全性。\n\n我想初始化时自动安装的主题大概率不合你的口味，Hexo可以通过安装主题来快速改变网站风格。如果你暂时没有心仪的主题，不妨在[Hexo官网的主题页](https://hexo.io/plugins/)看看，说不定就能找到你喜欢的主题。\n![Hexo官网的主题页](images/5.jpg)\n\n一般来说主题的README文档会指导你如何安装与配置主题。但如果没有，<del>换一个</del>试着按下面步骤安装：\n\n1. 获取主题文件：如果你不熟悉git操作，那就在GitHub的Code菜单（绿色按键）中选择Download Zip，把主题文件下载到本地并解压。\n2. 移动到文件夹：确定解压所得文件夹打开后就能看到_config.yml，将这个文件夹移动到博客根目录中的source文件夹。\n3. 修改配置信息：在博客根目录下的_config.yml文件中找到theme参数，将其值改为你的主题文件夹名，例如：\n```\ntheme: YourThemeName\n```\n\n![主题配置](images/6.jpg)\n\n现在在终端中逐行输入并执行下列指令：\n```\n$ hexo clean \n$ hexo generate\n$ hexo server \n```\n\nclean指令将清除缓存文件(db.json)和已生成的静态文件(public)。在某些情况（尤其是更换主题后），如果发现你对站点的更改无论如何也不生效，那么可能需要运行该命令。后两个指令上文已经介绍。\n\n打开网页，你应该能看到你安装的主题已经应用。不同主题都提供一定程度上的配置项，供你调整细节。如果你对网页制作具有基本的了解，或者能熟练使用chatGPT，那么你也可以尝试直接修改相关的代码，实现完全的自定义。\n\n### 写下第一篇博客（<span class=\"heti-em\">可选</span>）\n\n或许你早就想把你的想法放进网站，看看它是什么样子了。我们现在就来写下一篇博客。\n\nHexo有如下指令：\n```\n$ hexo new [layout] <title>\n```\n\nnew指令将新建一篇文章。如果没有设置layout的话，默认使用_config.yml中的default_layout参数代替。如果标题包含空格的话，需要使用引号括起来。像下面这样：\n```\n$ hexo new \"post title with whitespace\"\n```\n\n这个操作将会在根目录的source/_post文件夹下生成一个\\<title\\>.md文件。我们用任意的文本编辑器打开它，能看见类似下面的内容：\n```\n---\ntitle: {{ title }}\ndate: {{ date }}\n---\n```\n\n我们将Hexo中文件最上方以---分隔的区域叫做Front-matter，它用于指定个别文件的变量。具体的用法参见[官方文档](https://hexo.io/zh-cn/docs/front-matter)，这里不展开说明。\n\n在Front-matter下方是正文部分，Hexo支持以任何格式书写文章，只要安装了相应的渲染插件。默认的.md格式要以Makdown语法书写，Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。如果你不熟悉Markdown语法，可以参考[这个网站](https://markdown.com.cn/basic-syntax/)的内容。\n\n在编写博客时，只要你通过hexo s启动了服务器，你就可以通过刷新网页的方式实时查看编辑效果，因为<em>Hexo能够监视文件变动并立即重新生成静态文件</em>。此外，显示效果还可能受到主题影响。\n\n## 部署网站\n\n你已经在本地上看到你的网站的效果了。我们现在将它上传到互联网，使你的博客能被所有人访问。\n\n### 部署GitHub Pages\n\n我们假定你已经有一个GitHub账号而且已经配置好git了，不知道应该怎么做的话可以参考[这篇博客](https://blog.csdn.net/m0_46278037/article/details/118815158)。\n\n现在新建一个仓库（Create a new repository），Repository name填写为<你的GitHub用户名>.github.io，例如“ChaoiteC.github.io”，同时仓库可见性必须为Public（对所有人可见）。\n![新建仓库](images/7.jpg)\n\n如果操作正确，你会在仓库设置中找到Page选项。\n![Page选项](images/8.jpg)\n\n现在打开博客根目录下的_config.yml，找到Deployment相关配置项，如下填写：\n```\ndeploy:\n  type: git\n  repo: git@github.com:<你的GitHub用户名>/<你的GitHub用户名>.github.io.git\n  branch: main\n```\n\n你可能注意到官方文档与一些其他教程中repo项填写的是http链接，这也是可以的，但在使用GitHub Actions部署时可能会遭遇拒绝访问的问题。\n\n安装 hexo-deployer-git:\n```\n$ npm install hexo-deployer-git --save\n```\n\n执行下面命令：\n```\n$ hexo clean\n$ hexo g\n$ hexo deploy 或者简写为： $ hexo d\n或者简写为：\n$ hexo d -g\n```\ndeploy命令会将public目录中的文件和目录推送至_config.yml中指定的远端仓库和分支中，并且<span class=\"heti-em\">完全覆盖</span>该分支下的已有内容。\n\n如果一切工作正常，现在你可以在<你的GitHub用户名>.github.io中看到网站内容。\n\n### GitHub Actions自动部署（<span class=\"heti-em\">可选</span>）\n\n我们很快注意到，一旦你离开现在使用的设备，你就无法修改网站内容。当你更换设备时，你不得不将上述步骤全部重复。一旦设备出现故障更是会损失惨重。这些矛盾呼吁我们采取方法，要求我们能自动地储存与部署博客文件，而不受手上设备的限制。\n\nGitHub Actions为我们在需要的时候创建一个容器，我们在容器中安装软件并处理我们的博客文件，最后部署到Pages仓库中。现在我们来实现它。\n\n#### 前提\n\n首先在Github上新建一个仓库用来储存我们的博客文件，通常我们将其设为私有的。\n\n如果你安装了VS Code，这时候你可以在博客根目录右键菜单中选择“在终端中打开”来启动Windows Powershell，然后输入并执行：\n```\n code .\n```\n\n此命令将会启动VS Code并在其中打开这个文件夹。然后你可以在侧边栏中打开源代码管理页面，从GitHub添加远程库。只需要按照提示操作，你最终能将整个目录下的文件上传到仓库中（被.gitignore指定的文件/文件夹不会上传）。\n\n我们将上面内容视为准备操作，如果你不知道如何操作，可以寻求搜索引擎的帮助。\n\n#### 部署密钥\n\n现在在“git bash here”中执行下面命令：\n```\n$ ssh-keygen -f github-deploy-key\n```\n\n这个命令将生成部署密钥，你只需要一直按空格，根目录下就会出现两个文件：github-deploy-key和github-deploy-key.pub。\n\n> **注意**<br><br>\n> \n> 正如其名字，除非你确定自己在做什么，否则你不应该将密钥直接上传到仓库（尤其是公共仓库）。\n\n在博客源文件仓库中依序打开Settings->Secrets and variables->Actions->New repository secret。\n![New repository secret](images/9.jpg)\n\n在Name中填写“HEXO_DEPLOY_PRI”，在Value中填写github-deploy-key文件中的全部内容（包括头尾的文字）。然后Add secret。\n\n在Page仓库中依序打开Settings->Deploy keys->Add deploy key。\n![Add deploy key](images/10.jpg)\n\n在Title中填写“HEXO_DEPLOY_PUB”，在Key中填写github-deploy-key.pub文件中的全部内容，勾选Allow write access，然后Add key。\n\n#### 配置GitHub Actions\n\n在博客根目录下创建.github/workflows/deploy.yml文件，目录结构如下。\n```\n.\n└── .github\n    └── workflows\n        └── deploy.yml\n```\n\n在deploy.yml文件中粘贴下面内容并在对应地方作改动。\n\n```\n# Action's Name\nname: AutoDeploy\n\non:\n  # Triggering Condition 1 Main Branch Performs The Task After Receiving Push\n  push:\n    branches:\n      - main\n  # Triggering Condition 2 Manual Button\n  workflow_dispatch:\n\n# Putting Environment Variables Here You Need To Replace It With Your Own\nenv:\n  # After Hexo Compiles Use This Git User To Deploy To The Github Warehouse\n  GIT_USER: <你的GitHub用户名>\n  # After Hexo Compiles Use This Git Mailbox To Deploy To The Github Warehouse\n  GIT_EMAIL: <你的GitHub用户邮箱>\n  # The Git Hub Warehouse To Be Deployed After Hexo Compiles\n  GIT_DEPLOY_REPO: <你的GitHub用户名>/<你的GitHub用户名>.github.io\n  # Hexo Compiles The Branch To Deploy After Compilation\n  GIT_DEPLOY_BRANCH: main\n\njobs:\n  build:\n    name: Build on node ${{ matrix.node_version }} and ${{ matrix.os }}\n    runs-on: ubuntu-latest\n    if: github.event.repository.owner.id == github.event.sender.id\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        node_version: [16.x]\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Checkout deploy repo\n        uses: actions/checkout@v4\n        with:\n          repository: ${{ env.GIT_DEPLOY_REPO }}\n          ref: ${{ env.GIT_DEPLOY_BRANCH }}\n          path: .deploy_git\n\n      - name: Use Node.js ${{ matrix.node_version }}\n        uses: actions/setup-node@v1\n        with:\n          node-version: ${{ matrix.node_version }}\n\n      - name: Configuration environment\n        env:\n          HEXO_DEPLOY_PRI: ${{secrets.HEXO_DEPLOY_PRI}}\n        run: |\n          sudo timedatectl set-timezone \"Asia/Shanghai\"\n          mkdir -p ~/.ssh/\n          echo \"$HEXO_DEPLOY_PRI\" > ~/.ssh/id_rsa\n          chmod 600 ~/.ssh/id_rsa\n          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts\n          git config --global user.name $GIT_USER\n          git config --global user.email $GIT_EMAIL\n\n      - name: Install dependencies\n        run: |\n          npm install hexo-cli -g\n          # Install According To The Components You Installed\n          npm install - gulp gulp-uglify hexo hexo-deployer-git hexo-generator-archive hexo-generator-category hexo-generator-feed hexo-generator-index hexo-generator-search hexo-generator-searchdb hexo-generator-sitemap hexo-generator-tag hexo-renderer-ejs hexo-renderer-marked hexo-renderer-pug hexo-renderer-stylus hexo-server hexo-tag-cloud hexo-word-counter readable-stream uglify-es --save\n\n      - name: Deploy hexo\n        run: |\n          npm run deploy\n```\n\n现在你可以尝试在博客源文件仓库中作一点改动并推送到远程库，接着在仓库的Actions页面中观察工作是否正常（不被打红叉）。如果正常，大约在1-2分钟内会完成自动部署任务，你能在Pages上确认到更改。\n\n### 配置自定义域名（<span class=\"heti-em\">可选</span>）\n\n无论如何，<你的GitHub用户名>.github.io总归是不够有个性的，而且三级域名会给人一种寄人篱下的感觉（虽然事实也是如此）。现在，我们打算购买一个域名，并使他人能通过这个域名访问我们的网站。\n\n> **声明**<br><br>\n> \n> 本章所述内容仅基于个人经验，并无意宣传或推广任何特定公司或服务。笔者在撰写本文时未收取任何公司的任何形式的费用或报酬。无论你选择任何域名注册商购买域名，操作都大致相同。你所采取的一切行动应自行审慎决定，并非本文的责任范围。\n\n> **注意**<br><br>\n> \n> 本文内容不涉及选购服务器，但如果你意欲购买，请注意域名注册商和服务器提供商主体应该同在境内或境外，若一方在境内一方在境外，备案时可能会产生问题。\n\n选择一个合适的域名注册商是很重要的，至少是关乎钱包（）。我比较欣赏的是Cloudflare，他们也提供Pages服务和自动部署功能，而且配置其实比GitHub简单得多，在他们那里购买域名的话配置应该也是很简单的。但我最后选择的是Godaddy，为什么呢？因为Cloudflare注册不了.moe域名，让我感到非常遗憾。\n\n另外在Godaddy购买的时候可以选择买一个￥9/月的企业邮箱服务，让你可以快速拥有一个（一堆）以自己的域名为主机名的邮箱！例如我的邮箱：karubonwaito@karubon.moe。\n\n所以本文会以Godaddy为例，介绍如何购买和配置域名。\n\n#### 购买域名\n\n访问[Godaddy官网](https://www.godaddy.com/zh-sg)。先注册一个账号，然后搜索你想要的域名（例如本站的域名karubon.moe），如果这个域名没有被占用，你就会看到标价和加入购物车的按键。\n\n就像在网上购买一件商品一样一路继续，填写个人信息和支付方式，看清楚订单里的商品再付款，千万不要花钱购买自己不想要的东西。\n\n#### 配置DNS\n\n下单之后最好不要着急，先坐和放宽大概30-60分钟，打打游戏看看书，然后再进行下面的操作，否则你可能会遇到各种奇怪的bug。\n\n在Godaddy的页面中依序点击头像->我的产品->域名->管理全部，进入域名总览页面。\n![Godaddy的页面](images/11.jpg)\n\n进入域名总览页面后，你应该能看到你刚刚买的域名，旁边还有到期日期。没有到期日期的话就再等等，不要急着操作（）。\n\n点击你刚买的域名，进入到对应的管理页面，点击DNS，进入DNS记录栏，你应该能看到里面有几条预设的记录。把里面唯一的一条类型为A、数据/值为“停放”的记录删除，然后录入下面记录：\n```\nType Name Valve               TTL\nA    @    185.199.108.153     默认\nA    @    185.199.109.153     默认\nA    @    185.199.110.153     默认\nA    @    185.199.111.153     默认\nAAAA @    2606:50c0:8000::153 默认\nAAAA @    2606:50c0:8001::153 默认\nAAAA @    2606:50c0:8002::153 默认\nAAAA @    2606:50c0:8003::153 默认\n```\n\n配置好后，我们去配置GitHub Page。\n\n#### 配置GitHub Page\n\n在博客文件根目录的source文件夹中创建一个名为“CNAME”的文件，注意这个文件没有后缀名。在文件中填入且仅填入你的域名，不加https，例如：\n![CNAME](images/12.jpg)\n\n这能避免在下一次部署博客时CNAME文件被意外删除导致你无法通过域名访问网站。\n\n在GitHub网页上打开Page仓库的Page设置，在Custom domain选项中填入你的域名，同样不加https，然后保存，输入框的下方应该会出现DNS测试的提示，没有就刷新页面。例如：\n![Page设置](images/13.jpg)\n\n如果一切正常，会出现绿钩和DNS check successful。现在你可以通过这个域名访问你的网站。\n\n但是你可能很快注意到，在你访问网站时，浏览器会提示不安全。这是因为网站没有配置SSL证书。这个时候不要着急，先坐和放宽大概30-60分钟（），然后回到Page仓库的Page设置页勾选Enforce HTTPS选项，GitHub Page会自动为你配置证书。如果你来得太早，你可能会遇到这个选项勾不上的问题。\n\n## 参考资料\n\n> Hexo官方中文文档(https://hexo.io/zh-cn/docs/)\n>\n> 快速搭建个人博客——保姆级教程(https://pdpeng.github.io/2022/01/19/setup-personal-blog)\n>\n> 利用Github Actions自动部署Hexo博客(https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/)\n>\n> GitHub官方文档(https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site)\n","tags":["网站设计"],"categories":["技术"]},{"title":"基于一阶互补滤波的MPU6050姿态解算","url":"/基于一阶互补滤波的mpu6050姿态解算/","content":"\n当我们通过MPU6050进行姿态解算时，MPU6050给了我们两组数据：一组来自加速度计，一组来自陀螺仪。<!-- more -->两个传感器的数据都可以独自求得小车此时的角度，但它们也各自存在问题：加速度计比较敏感，由振动产生的瞬时误差比较大；陀螺仪积分得到的角度虽然受振动影响比较小，但随着时间的增加，积分误差和温度漂移会逐渐增大。从另一角度加以解释，就是加速度计主要受到高频噪声的影响，而陀螺仪主要受到低频噪声的影响。这两个传感器正好可以弥补相互的缺点。短时间用陀螺仪比较准确，长时间用加速度计比较准确；运动时用陀螺仪比较准确，静止时用加速度计比较准确，也就是互补。通过一阶互补滤波，我们滤除加速度计的高频部分，滤除陀螺仪的低频部分，并将这两个数据以一定权重相加，就能得到比较准确的角度了。\n\n你能在其他资料里面看到二阶互补滤波和卡尔曼滤波。相比于这两种算法，一阶互补滤波的优势在于计算量少、收敛速度较快，对性能薄弱的芯片比较友好。虽然没有二阶互补滤波和卡尔曼滤波那么精确，但是对于我们的用途来说还在能接受的范围以内。\n\n下面我们结合代码来说明基于一阶互补滤波的姿态解算的流程。\n\n## 自定义结构体\n\n为了让代码看起来更加优雅，我们先定义这样一个结构体，并且声明对应的变量，来储存我们需要的数据。\n\n```c\ntypedef struct {\n    float Roll;//解算所得角度\n    float Pitch;\n    float Yaw;\n\n    float Roll_a;//加速度计计算得到的角度\n    float Pitch_a;\n    float Roll_g;//陀螺仪计算得到的角速度\n    float Pitch_g;\n\n    float lastRoll;//上次的解算角度\n    float lastPitch;\n\n    int offset_gx;//陀螺仪零漂值\n    int offset_gy;\n    int offset_gz;\n} IMU;\n\n...\n\nIMU IMU_Data;\n```\n\n## 加速度计与陀螺仪的分别解算\n\n在这里我们以小车的Roll角（翻滚角），也就是单车需要保持平衡的那个角度为例，来解释如何通过加速度计与陀螺仪分别计算出角度。额外注意的是，本文的X轴指向小车前方，如下图所示，但别的资料不一定，在查阅其他资料时请多加留心。\n\n![三轴指示](https://img-blog.csdnimg.cn/737d630b8f374474ba48cebbdab13863.jpeg)\n\n### 加速度计\n\n加速度计通过以下方式计算Roll角：\n\n```c\nIMU_Data.Roll_a = atan2(mpu6050_acc_x, mpu6050_acc_z) / (PI / 180);\n```\n​\n对数学上的推导过程感兴趣的朋友可以参考[这篇博客](https://blog.csdn.net/hbsyaaa/article/details/108186892)，在这里不展开说明。总之，mpu6050_acc_x与mpu6050_acc_z是我们通过逐飞库提供的mpu6050_get_acc函数读取到的直接数据，通过上面的数学运算，我们得到的是根据加速度计算得的Roll角Roll_a，单位为度。atan2函数定义在math.h标准库中，使用前要先包含这个库。\n\n如果要计算Pitch角（俯仰角），只需要把x改为y即可。遗憾的是，由于原理上的限制，我们无法用加速度计算出Yaw角（航向角）。\n\n### 陀螺仪\n\n陀螺仪的角速度转换为实际物理数据：\n\n```c\nIMU_Data.Roll_g = -(mpu6050_gyro_y) / 14.3;\n```\n\n通过这个运算，我们能把MPU6050提供的陀螺仪数据转换成实际的物理数据，单位是度每秒，也就是角速度。我们只需要对角速度进行积分，就能得到角度了，这个处理我们放在一阶互补滤波的函数中。代码中是否要加负号取决于你的传感器芯片，14.3这个数字由陀螺仪的量程得出，如果用逐飞库的mpu6050_gyro_transition函数来转换的话应该就不用关心这个数字了。\n\n同样的，如果要计算Pitch角，只需要把y改为x即可。你甚至可以用Z轴的数据算出Yaw角，不过，就像我们上面提到的，随着时间的推移，误差将不断增大。要弥补这一误差，你可以结合GNSS（全球卫星导航系统）的数据，但这不在本文的讨论范围之内。\n\n## 一阶互补滤波过程\n\n```c\n#define Ka 0.80  // 加速度解算权重\n#define dt 0.005 // 采样间隔（单位：秒）\n \nfloat FOCF(float acc_m, float gyro_m, float* last_angle) {\n    float temp_angle;\n    temp_angle = Ka * acc_m + (1 - Ka) * (*last_angle + gyro_m * dt);\n    *last_angle = temp_angle;\n    return temp_angle;\n}\n \nIMU_Data.Roll = FOCF(IMU_Data.Roll_a, IMU_Data.Roll_g, &IMU_Data.lastRoll);\n```\n\n在分别处理好加速度计与陀螺仪的数据之后，现在要将两个数据互补在一起。我们定义一个名为FOCF的函数，用于处理这一数学过程。这个函数接受处理好的数据和上次解算结果的储存地址作为参数。\n\n首先，我们将陀螺仪解算出的角速度与采样间隔相乘，得到自上次采样以来的角度变化量。通过将上一次解算结果与这个变化量相加，我们就能得到由陀螺仪计算得到的新的Roll角。\n\n接着，我们将加速度解算所得的角度与陀螺仪解算所得的角度按照权重因子进行加权相加，从而得到最终的解算结果。这个权重因子需要根据实际情况进行调整。\n\n在计算完成后，我们更新\\*last_angle，以备下一次解算使用。最终，将计算得到的角度作为结果返回，你就能在其他函数中读取IMU_Data.Roll，最终保持你的单车的平衡。\n\nPitch角也是同理。\n\n## 在解算之前...\n\n不幸的，你接上陀螺仪后发现，即使你不去触动它，它的数据也不为0，这是工艺上不可避免的误差造成的。幸运的是，这个误差在每一次运行过程中变化不大，让我们可以用简单的方法把它的影响降到最小。\n\n现在我们定义一个去除零漂的函数IMU_offset，并在每次单片机启动时调用它。\n\n```c\n#define OFFSET_COUNT 200\n \nvoid IMU_offset() {\n    for (int i = 0; i < OFFSET_COUNT; i++) {\n        system_delay_ms(5);\n        if (mpu6050_gyro_x == mpu6050_gyro_y) {\n            i--;\n        }\n        else {\n            IMU_Data.offset_gx += mpu6050_gyro_x;\n            IMU_Data.offset_gy += mpu6050_gyro_y;\n            IMU_Data.offset_gz += mpu6050_gyro_z;\n        }\n    }\n    IMU_Data.offset_gx /= OFFSET_COUNT;\n    IMU_Data.offset_gy /= OFFSET_COUNT;\n    IMU_Data.offset_gz /= OFFSET_COUNT;\n}\n```\n\n既然变化不大，我们只需要求其平均值，然后在每次采样时减去它就好了。这个函数就起求平均值这个作用。OFFSET_COUNT是你要采集的数据量，只要取一个恰当的数值即可。system_delay_ms(5)中的5是你规定的采样间隔。\n\n考虑到实际应用中有时会出现杜邦线接触不良的情况，在代码中做了一个简单的判断。当发生接触不良的时候，X轴数据会与Y轴数据相同（通常均为0，但偶有意外），我们就认为数据是无效的。这是在被杜邦线困扰已久之后摸索出的野路子，权当参考。\n\n## 综上所述\n\n当我们完成了上面所有的代码之后，是时候调用它们了。去零漂的函数要在启动时调用，也就是main函数的开头部分。为了保证我们的采样间隔恒定不变，我们需要将函数放在定时器的中断处理函数中执行。代码分为两个部分：第一个部分你要从MPU6050中读取原始的数据，并将陀螺仪的原始数据减去你计算出的零漂值；第二个部分你要分别处理加速度计与陀螺仪的数据，然后进行一阶互补滤波。\n\n（感觉这玩意各种意义上都写得好烂......）\n\n> 之前报名了第十八届全国大学生智能车竞赛的单车越野组别，但由于种种原因最终未能完赛。所以打算把自己做好的一部分发出来，同时也是对自己过去一个多学期生活的一点总结。\n>\n> 代码基于[逐飞科技的CH32V307开源库](https://gitee.com/seekfree/CHV307_Library)。\n\n>​ 参赛的代码早些时候已经上传到[Github](https://github.com/ChaoiteC/BIKE_OFF_ROAD)。\n\n> 这篇博客最早于2023年8月3日凌晨[在CSDN上](https://blog.csdn.net/CsdnAKinKo/article/details/132053654)写成并发布。在这里略作了修改。\n","tags":["智能车竞赛","MPU6050","姿态解算"],"categories":["技术"]},{"title":"Hello World","url":"/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]